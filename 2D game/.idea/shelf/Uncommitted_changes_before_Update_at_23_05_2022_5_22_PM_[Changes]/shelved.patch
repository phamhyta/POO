Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1653148082040)
+++ b/.idea/vcs.xml	(date 1653148082040)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/game/gameObject/object/OBJ_Coin_Bronze.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/object/OBJ_Coin_Bronze.java b/src/game/gameObject/object/OBJ_Coin_Bronze.java
new file mode 100644
--- /dev/null	(date 1653193776363)
+++ b/src/game/gameObject/object/OBJ_Coin_Bronze.java	(date 1653193776363)
@@ -0,0 +1,30 @@
+package game.gameObject.object;
+
+import game.gameObject.Material;
+import game.gameObject.Player;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+
+public class OBJ_Coin_Bronze extends Material {
+
+	public OBJ_Coin_Bronze(Vector2f origin, int size, int value) {
+		super(origin, size);
+		this.coin = value;
+		type= type_consumable;
+		name = "Bronze Coin";
+		spriteSheet = new SpriteSheet("res/ui/items.png");
+		image =  spriteSheet.getSubimage(3*32,5*32,32,32);
+	}
+
+	public void use(Player player) {
+		player.setCoin( player.getCoin() + this.coin);
+	}
+
+	@Override
+	public void render(Graphics2D g) {
+		g.drawImage(image,(int)pos.getWorldVar().x,(int)pos.getWorldVar().y,size,size, null);
+	}
+}
Index: src/game/gameObject/object/OBJ_ManaCrystal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/object/OBJ_ManaCrystal.java b/src/game/gameObject/object/OBJ_ManaCrystal.java
new file mode 100644
--- /dev/null	(date 1653193630501)
+++ b/src/game/gameObject/object/OBJ_ManaCrystal.java	(date 1653193630501)
@@ -0,0 +1,35 @@
+package game.gameObject.object;
+
+import game.gameObject.Material;
+import game.gameObject.Player;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+
+public class OBJ_ManaCrystal extends Material {
+
+	public OBJ_ManaCrystal(Vector2f origin, int size) {
+		super(origin, size);
+
+		type = type_consumable;
+		name = "Mana Crystal";
+		MP =10;
+		spriteSheet = new SpriteSheet("res/ui/items.png");
+		image =  spriteSheet.getSubimage(32,0,32,32);
+	}
+
+	public void use(Player player) {
+		if(player.getMana() + this.MP < player.getMaxMana()) {
+			player.setCurrentMana(player.getMana() + this.MP);
+		}
+		else{
+			player.setCurrentMana(player.getMaxMana());
+		}
+	}
+
+	public void render(Graphics2D g){
+	g.drawImage(image,(int)pos.getWorldVar().x,(int)pos.getWorldVar().y,size,size, null);
+	}
+}
Index: src/game/gameObject/object/OBJ_Potion_Red.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/object/OBJ_Potion_Red.java b/src/game/gameObject/object/OBJ_Potion_Red.java
new file mode 100644
--- /dev/null	(date 1653193574179)
+++ b/src/game/gameObject/object/OBJ_Potion_Red.java	(date 1653193574179)
@@ -0,0 +1,35 @@
+package game.gameObject.object;
+
+import game.gameObject.Material;
+import game.gameObject.Player;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+
+import java.awt.Graphics2D;
+
+
+public class OBJ_Potion_Red extends Material {
+
+	public OBJ_Potion_Red(Vector2f origin, int size) {
+		super(origin, size);
+		type= type_consumable;
+		name = "Red Potion";
+		HP =50;
+		spriteSheet = new SpriteSheet("res/ui/items.png");
+		image =  spriteSheet.getSubimage(0,288,32,32);
+
+	}
+
+	public void use(Player player) {
+		if(player.getHealth() + this.HP < player.getMaxHealth()) {
+			player.setCurrentHealth(player.getHealth() + this.HP);
+		}
+		else{
+			player.setCurrentHealth(player.getMaxHealth());
+		}
+	}
+
+	public void render(Graphics2D g){
+		g.drawImage(image,(int)pos.getWorldVar().x,(int)pos.getWorldVar().y,size,size, null);
+	}
+}
Index: src/game/gameObject/object/OBJ_Key.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/object/OBJ_Key.java b/src/game/gameObject/object/OBJ_Key.java
new file mode 100644
--- /dev/null	(date 1653193630506)
+++ b/src/game/gameObject/object/OBJ_Key.java	(date 1653193630506)
@@ -0,0 +1,26 @@
+package game.gameObject.object;
+
+
+import game.gameObject.Material;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+
+public class OBJ_Key extends Material {
+
+	public OBJ_Key(Vector2f origin, int size) {
+		super(origin, size);
+		name = "Key";
+
+		spriteSheet = new SpriteSheet("res/objects/key.png");
+		image =  spriteSheet.getSubimage(0,0,size,size);
+//		description= "["+ name +"]\nIt opens a door.";
+	}
+
+	@Override
+	public void render(Graphics2D g) {
+
+	}
+}
Index: src/game/gameObject/object/OBJ_Door.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/object/OBJ_Door.java b/src/game/gameObject/object/OBJ_Door.java
new file mode 100644
--- /dev/null	(date 1653193630512)
+++ b/src/game/gameObject/object/OBJ_Door.java	(date 1653193630512)
@@ -0,0 +1,24 @@
+package game.gameObject.object;
+
+import game.gameObject.Material;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+
+import java.awt.Graphics2D;
+
+public class OBJ_Door extends Material {
+
+
+		public OBJ_Door(Vector2f origin, int size) {
+			super(origin, size);
+
+//			name = "Door";
+			type = type_player;
+			spriteSheet = new SpriteSheet("res/ui/items.png");
+			image =  spriteSheet.getSubimage(192,64,32,32);
+
+		}
+	public void render(Graphics2D g){
+		g.drawImage(image,(int)pos.getWorldVar().x,(int)pos.getWorldVar().y,size,size, null);
+		}
+	}
Index: src/res/tile/dungeon_tiles_formatted_v2.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/res/tile/dungeon_tiles_formatted_v2.tsx b/src/res/tile/dungeon_tiles_formatted_v2.tsx
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/res/tile/dungeon_tiles_formatted_v2.tsx	(date 1652572440000)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<tileset version="1.8" tiledversion="1.8.4" name="dungeon_tiles_formatted_v2" tilewidth="16" tileheight="16" tilecount="299" columns="23">
+ <image source="dungeon_tiles_formatted_v2.png" width="368" height="208"/>
+</tileset>
Index: src/game/data/MapAsset.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/data/MapAsset.java b/src/game/data/MapAsset.java
new file mode 100644
--- /dev/null	(date 1653193460516)
+++ b/src/game/data/MapAsset.java	(date 1653193460516)
@@ -0,0 +1,17 @@
+package game.data;
+
+import game.tile.TileManager;
+
+public abstract class MapAsset {
+    protected GameControl gc;
+    public MapAsset(GameControl gc){
+        this.gc = gc;
+        setMonsterPosition();
+        setMaterialPosition();
+        setNPC();
+    }
+    protected abstract void setMonsterPosition();
+    public abstract void setMaterialPosition();
+    public abstract void resetEnemy(int i);
+    public abstract void setNPC();
+}
Index: src/res/tile/tilemap.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/res/tile/tilemap.xml b/src/res/tile/tilemap.xml
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/res/tile/tilemap.xml	(date 1652572440000)
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<map version="1.8" tiledversion="1.8.4" orientation="orthogonal" renderorder="right-down" width="50" height="50" tilewidth="16" tileheight="16" infinite="0" nextlayerid="4" nextobjectid="1">
+ <tileset firstgid="1" name="dungeon_tiles_formatted_v2" tilewidth="16" tileheight="16" tilecount="299" columns="23">
+  <image source="dungeon_tiles_formatted_v2.png" width="368" height="208"/>
+ </tileset>
+ <layer id="1" name="Solid" width="50" height="50">
+  <data encoding="csv">
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172
+</data>
+ </layer>
+ <layer id="2" name="Layer 1" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,48,49,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,48,49,50,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,47,48,49,71,72,73,49,50,48,49,48,49,48,49,48,49,50,48,49,50,48,49,48,49,50,48,48,49,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,70,71,72,73,49,71,72,73,71,72,71,72,71,72,71,72,73,71,72,73,71,72,71,72,73,71,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,93,94,95,96,186,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,25,25,25,25,26,25,25,25,25,26,25,25,26,25,26,28,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,48,48,48,25,25,48,48,48,25,25,48,48,49,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,71,71,71,48,48,71,71,71,48,48,71,71,72,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,71,71,71,71,71,72,71,71,71,72,73,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,50,71,72,73,71,72,73,26,27,27,25,26,27,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,26,27,71,72,73,71,72,73,27,27,50,48,49,50,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,26,27,71,72,73,71,72,73,50,50,25,26,27,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,25,26,27,71,72,73,71,72,73,73,73,25,25,26,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,48,71,72,71,72,25,26,27,48,48,49,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,25,71,71,25,26,27,48,49,50,71,71,72,25,26,28,0,0,0,47,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,48,71,25,26,27,50,71,72,73,25,26,27,48,49,28,0,0,0,70,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,72,25,26,27,25,26,27,25,26,27,25,48,49,25,25,26,51,0,0,1,26,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,48,49,50,48,49,50,48,49,50,48,71,72,48,48,49,74,0,0,24,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,93,94,95,94,95,96,94,34,26,25,33,96,95,94,95,96,95,96,97,0,0,47,26,71,72,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,70,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,28,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,162,2,2,2,2,2,2,2,2,2,2,2,2,2,57,26,25,56,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,164,0,0,0,0,0,
+0,0,0,0,24,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,27,28,0,0,0,0,0,
+0,0,0,0,47,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,50,51,0,0,0,0,0,
+0,0,0,0,93,94,34,48,33,95,96,95,96,94,95,96,95,94,95,96,95,96,94,34,48,33,96,94,95,96,95,96,94,95,96,95,94,95,96,95,94,34,49,33,97,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,28,0,0,0,0,0,0,
+0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,70,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,49,28,0,0,0,0,0,0,
+0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,0,1,57,72,56,164,0,0,0,0,0,
+0,0,0,0,0,47,25,26,27,51,0,0,0,0,0,0,0,0,0,0,0,0,47,25,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,27,28,0,0,0,0,0,
+0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,27,28,0,0,0,0,0,
+0,0,0,0,0,47,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,73,74,0,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,50,51,0,0,0,0,0,
+0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+ <layer id="3" name="Layer 2" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,248,249,250,249,250,0,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,271,272,273,272,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,116,117,116,117,118,119,120,0,0,0,0,116,117,118,116,117,118,119,120,0,0,0,0,0,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,117,118,119,120,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,
+0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,118,118,0,0,0,116,117,118,119,120,120,120,120,120,120,120,120,120,120,0,0,0,116,117,118,119,120,120,120,120,120,120,116,117,118,119,120,0,0,0,120,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,
+0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,0,221,221,222,223,224,0,0,0,0,0,
+0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,0,244,244,245,246,247,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+</map>
Index: src/res/tile/tilemap.tmx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/res/tile/tilemap.tmx b/src/res/tile/tilemap.tmx
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/res/tile/tilemap.tmx	(date 1652572440000)
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<map version="1.8" tiledversion="1.8.4" orientation="orthogonal" renderorder="right-down" width="50" height="50" tilewidth="16" tileheight="16" infinite="0" nextlayerid="4" nextobjectid="1">
+ <tileset firstgid="1" name="dungeon_tiles_formatted_v2" tilewidth="16" tileheight="16" tilecount="299" columns="23">
+  <image source="dungeon_tiles_formatted_v2.png" width="368" height="208"/>
+ </tileset>
+ <layer id="1" name="Solid" width="50" height="50">
+  <data encoding="csv">
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,234,234,234,234,172,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172
+</data>
+ </layer>
+ <layer id="2" name="Layer 1" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,48,49,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,48,49,50,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,47,48,49,71,72,73,49,50,48,49,48,49,48,49,48,49,50,48,49,50,48,49,48,49,50,48,48,49,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,70,71,72,73,49,71,72,73,71,72,71,72,71,72,71,72,73,71,72,73,71,72,71,72,73,71,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,93,94,95,96,186,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,25,25,25,25,26,25,25,25,25,26,25,25,26,25,26,28,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,48,48,48,25,25,48,48,48,25,25,48,48,49,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,71,71,71,48,48,71,71,71,48,48,71,71,72,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,71,71,71,71,71,72,71,71,71,72,73,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,50,71,72,73,71,72,73,26,27,27,25,26,27,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,26,27,71,72,73,71,72,73,27,27,50,48,49,50,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,26,27,71,72,73,71,72,73,50,50,25,26,27,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,25,26,27,71,72,73,71,72,73,73,73,25,25,26,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,48,71,72,71,72,25,26,27,48,48,49,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,25,71,71,25,26,27,48,49,50,71,71,72,25,26,28,0,0,0,47,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,48,71,25,26,27,50,71,72,73,25,26,27,48,49,28,0,0,0,70,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,72,25,26,27,25,26,27,25,26,27,25,48,49,25,25,26,51,0,0,1,26,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,48,49,50,48,49,50,48,49,50,48,71,72,48,48,49,74,0,0,24,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,93,94,95,94,95,96,94,34,26,25,33,96,95,94,95,96,95,96,97,0,0,47,26,71,72,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,70,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,28,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,162,2,2,2,2,2,2,2,2,2,2,2,2,2,57,26,25,56,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,164,0,0,0,0,0,
+0,0,0,0,24,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,27,28,0,0,0,0,0,
+0,0,0,0,47,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,50,51,0,0,0,0,0,
+0,0,0,0,93,94,34,48,33,95,96,95,96,94,95,96,95,94,95,96,95,96,94,34,48,33,96,94,95,96,95,96,94,95,96,95,94,95,96,95,94,34,49,33,97,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,28,0,0,0,0,0,0,
+0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,70,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,49,28,0,0,0,0,0,0,
+0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,0,1,57,72,56,164,0,0,0,0,0,
+0,0,0,0,0,47,25,26,27,51,0,0,0,0,0,0,0,0,0,0,0,0,47,25,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,27,28,0,0,0,0,0,
+0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,27,28,0,0,0,0,0,
+0,0,0,0,0,47,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,73,74,0,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,50,51,0,0,0,0,0,
+0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+ <layer id="3" name="Layer 2" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,248,249,250,249,250,0,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,271,272,273,272,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,116,117,116,117,118,119,120,0,0,0,0,116,117,118,116,117,118,119,120,0,0,0,0,0,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,117,118,119,120,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,
+0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,118,118,0,0,0,116,117,118,119,120,120,120,120,120,120,120,120,120,120,0,0,0,116,117,118,119,120,120,120,120,120,120,116,117,118,119,120,0,0,0,120,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,
+0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,0,221,221,222,223,224,0,0,0,0,0,
+0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,0,244,244,245,246,247,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+</map>
Index: src/game/data/Map01.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/data/Map01.java b/src/game/data/Map01.java
new file mode 100644
--- /dev/null	(date 1653210405409)
+++ b/src/game/data/Map01.java	(date 1653210405409)
@@ -0,0 +1,69 @@
+package game.data;
+
+import game.gameObject.monster.TinyBox;
+import game.gameObject.monster.TinyMon;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+import game.tile.TileManager;
+
+public class Map01 extends MapAsset{
+
+    public Map01 (GameControl gc){
+
+        super(gc);
+        gc.tm = new TileManager("res/tile/tilemap.xml", gc.cam);
+    }
+    @Override
+    public void setMonsterPosition() {
+        int i =0;
+        SpriteSheet minimonsterSheet = new SpriteSheet("res/entity/minimonsters.png",16,16);
+        gc.origin[i] = new Vector2f(500, 500);
+        gc.enemy[i] = new TinyBox(gc.cam,new SpriteSheet(minimonsterSheet.getSprite(0,0,128,32),16,16),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(600, 600);
+        gc.enemy[i] = new TinyBox(gc.cam,new SpriteSheet(minimonsterSheet.getSprite(0,1,128,32),16,16),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(550, 550);
+        gc.enemy[i] = new TinyBox(gc.cam,new SpriteSheet(minimonsterSheet.getSprite(0,2,128,32),16,16),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(570, 590);
+        gc.enemy[i] = new TinyBox(gc.cam,new SpriteSheet(minimonsterSheet.getSprite(0,3,128,32),16,16),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(1070, 1070);
+        gc.enemy[i]= new TinyMon(gc.cam,new SpriteSheet("res/entity/littlegirl.png",48,48),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(1000, 1000);
+        gc.enemy[i]= new TinyMon(gc.cam,new SpriteSheet("res/entity/littlegirl.png",48,48),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(1500, 1500);
+        gc.enemy[i]= new TinyMon(gc.cam,new SpriteSheet("res/entity/littlegirl.png",48,48),new Vector2f(gc.origin[i]), 64);
+        i++;
+        gc.origin[i] = new Vector2f(700, 1000);
+        gc.enemy[i]= new TinyMon(gc.cam,new SpriteSheet("res/entity/littlegirl.png",48,48),new Vector2f(gc.origin[i]), 64);
+    }
+
+
+    @Override
+    public void setMaterialPosition() {
+
+    }
+
+    @Override
+    public void resetEnemy(int i) {
+        SpriteSheet minimonsterSheet = new SpriteSheet("res/entity/minimonsters.png",16,16);
+        if(i<2){
+            gc.enemy[i] = new TinyBox(gc.cam,new SpriteSheet(minimonsterSheet.getSprite(0,0,128,32),16,16),new Vector2f(gc.origin[i]), 64);
+        }
+        else if(i <4){
+            gc.enemy[i] = new TinyBox(gc.cam,new SpriteSheet(minimonsterSheet.getSprite(0,1,128,32),16,16),new Vector2f(gc.origin[i]), 64);
+        }
+        else{
+            gc.enemy[i]= new TinyMon(gc.cam,new SpriteSheet("res/entity/littlegirl.png",48,48),new Vector2f(gc.origin[i]), 64);
+        }
+    }
+
+    @Override
+    public void setNPC() {
+
+    }
+}
Index: src/game/data/GameControl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/data/GameControl.java b/src/game/data/GameControl.java
new file mode 100644
--- /dev/null	(date 1653212728732)
+++ b/src/game/data/GameControl.java	(date 1653212728732)
@@ -0,0 +1,119 @@
+package game.data;
+
+import game.gameObject.Material;
+import game.gameObject.NPC;
+import game.gameObject.Player;
+import game.gameObject.monster.Enemy;
+import game.math.Vector2f;
+import game.states.GameStateManager;
+import game.tile.TileManager;
+import game.util.Camera;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import java.awt.*;
+import java.util.ArrayList;
+
+public class GameControl {
+    public Camera cam;
+    public Player player;
+    public GameStateManager gsm;
+    private MapAsset[] mapAs;
+    private int currentMap =0;
+
+    public static ArrayList<Material> materialGame;
+
+    public Enemy[] enemy;
+    public long[] deadStartTime;
+    public NPC[] npc;
+    public Vector2f[] origin;
+    public TileManager tm;
+
+    public GameControl(Player player, Camera cam, GameStateManager gsm){
+        this.player = player;
+        this.cam = cam;
+        this.gsm = gsm;
+        mapAs = new MapAsset[5];
+        materialGame = new ArrayList<>();
+        enemy = new Enemy[20];
+        origin = new Vector2f[20];
+        deadStartTime = new long[20];
+        for(int i=0; i< deadStartTime.length; i++){
+            deadStartTime[i]=0;
+        }
+        npc = new NPC[5];
+        mapAs[0] = new Map01(this);
+    }
+    private void resetAsset(){
+        materialGame.clear();
+        for(int i=0; i< enemy.length; i++){enemy[i] =null;}
+        for(int i=0; i< npc.length; i++){npc[i] =null;}
+    }
+
+    public void update(double time){
+
+        for(int i=0; i< materialGame.size(); i++){
+            if(player.getBounds().collides(materialGame.get(i).getBounds())){
+
+                if(materialGame.get(i).type == Material.type_consumable){
+                    materialGame.get(i).use(player);
+                    materialGame.remove(i);
+                    //player use it
+                }else if(materialGame.get(i).type == Material.type_nextMap){
+                    // nextMap
+                }
+                else {
+                    //add to inventory
+                    player.setTargetMaterial(materialGame.get(i));
+                    materialGame.remove(i);
+                }
+            }
+        }
+
+        for(int i =0 ; i< enemy.length; i++){
+            if(enemy[i] != null){
+                if(player.getHitBounds().collides(enemy[i].getBounds())) {
+                    player.setTargetEnemy(enemy[i]);
+                }
+                if(enemy[i].getDeath()){
+                    player.setEXP(player.getEXP()+enemy[i].getEXP());
+                    enemy[i].drop();
+                    enemy[i]= null;
+                    deadStartTime[i] = System.currentTimeMillis();
+                }
+                else{
+                    enemy[i].update(player,time,origin[i]);
+                }
+            }
+            if(enemy[i]== null && deadStartTime[i] !=0){
+                if(System.currentTimeMillis() - deadStartTime[i] > 5000){
+                    mapAs[currentMap].resetEnemy(i);
+                    deadStartTime[i]=0;
+                }
+            }
+        }
+    }
+
+    public void render(Graphics2D g){
+        tm.render(g);
+        for(int i=0; i< enemy.length; i++){
+            if(enemy[i] != null){
+                if(cam.getBounds().collides(enemy[i].getBounds())) {
+                    enemy[i].render(g);
+                }
+            }
+        }
+        for(int i=0; i< materialGame.size(); i++){
+            materialGame.get(i).render(g);
+        }
+    }
+    public void input(MouseHandler mouse, KeyHandler key){
+        key.enter.tick();
+        for(int i=0; i< npc.length; i++){
+            if(npc[i] != null && player.getBounds().collides(npc[i].getBounds()) && key.enter.clicked){
+
+            }
+        }
+
+    }
+}
Index: .idea/2D game.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/2D game.iml b/.idea/2D game.iml
new file mode 100644
--- /dev/null	(date 1653148717499)
+++ b/.idea/2D game.iml	(date 1653148717499)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/.idea/.gitignore	(date 1652572440000)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1652715379919)
+++ b/.idea/misc.xml	(date 1652715379919)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="18" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/.idea/uiDesigner.xml	(date 1652572440000)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/.idea/modules.xml	(date 1652572440000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/2D game.iml" filepath="$PROJECT_DIR$/.idea/2D game.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1652715379952)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1652715379952)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1652715379943)
+++ b/.idea/codeStyles/Project.xml	(date 1652715379943)
@@ -0,0 +1,7 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <ScalaCodeStyleSettings>
+      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
+    </ScalaCodeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: src/game/GamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/GamePanel.java b/src/game/GamePanel.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/GamePanel.java	(date 1652572440000)
@@ -0,0 +1,150 @@
+package game;
+
+import game.states.GameStateManager;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import javax.swing.JPanel;
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.image.BufferedImage;
+
+public class GamePanel extends JPanel implements Runnable{
+
+    public static int width;
+    public static int height;
+    public static int oldFrameCount;
+    public static int oldTickCount;
+    public static int tickCount;
+
+    private Thread thread;
+    private boolean running = false;
+
+    private BufferedImage img;
+    private Graphics2D g;
+
+    private MouseHandler mouse;
+    private KeyHandler key;
+
+    private GameStateManager gsm;
+    public GamePanel( int width, int height) {
+        GamePanel.width = width;
+        GamePanel.height = height;
+
+        setPreferredSize(new Dimension(width, height));
+        setFocusable(true);
+        requestFocus();
+    }
+    public void addNotify(){
+        super.addNotify();
+        if(thread== null){
+            thread = new Thread(this, "GameThread");
+            thread.start();
+        }
+    }
+
+    public void init(){
+        running = true;
+
+        img= new BufferedImage(width,height, BufferedImage.TYPE_INT_ARGB);
+        g = (Graphics2D) img.getGraphics();
+
+        mouse = new MouseHandler(this);
+        key = new KeyHandler(this);
+
+        gsm= new GameStateManager(g);
+
+    }
+
+    public void run() {
+        init();
+        final double GAME_HERTZ = 64;
+        final double TBU = 1000000000 / GAME_HERTZ; // Time Before Update
+
+        final int MUBR = 3; // Must Update before render
+
+        double lastUpdateTime = System.nanoTime();
+        double lastRenderTime;
+
+        final double TARGET_FPS = 1000;
+        final double TTBR = 1000000000 / TARGET_FPS; // Total time before render
+
+        int frameCount = 0;
+        int lastSecondTime = (int) (lastUpdateTime / 1000000000);
+        oldFrameCount = 0;
+        tickCount = 0;
+        oldTickCount = 0;
+
+        while (running) {
+            double now = System.nanoTime();
+            int updateCount = 0;
+            while (((now - lastUpdateTime) > TBU) && (updateCount < MUBR)) {
+                update(now);
+                input(mouse,key);
+                lastUpdateTime += TBU;
+                updateCount++;
+                tickCount++;
+            }
+            if ((now - lastUpdateTime) > TBU) {
+                lastUpdateTime = now - TBU;
+            }
+
+            input(mouse,key);
+            render();
+            draw();
+            lastRenderTime = now;
+            frameCount++;
+
+            int thisSecond = (int) (lastUpdateTime / 1000000000);
+            if (thisSecond > lastSecondTime) {
+                if (frameCount != oldFrameCount) {
+//                    System.out.println("NEW SECOND " + thisSecond + " " + frameCount);
+                    oldFrameCount = frameCount;
+                }
+                if (tickCount != oldTickCount) {
+//                    System.out.println("NEW SECOND (T) " + thisSecond + " " + tickCount);
+                    oldTickCount = tickCount;
+                }
+                frameCount = 0;
+                tickCount = 0;
+                lastSecondTime = thisSecond;
+            }
+
+            while (now - lastRenderTime < TTBR && now - lastUpdateTime < TBU) {
+                Thread.yield();
+
+                try {
+                    Thread.sleep(1);
+                } catch (Exception e) {
+                    System.out.println("ERROR: yielding thread");
+                }
+
+                now = System.nanoTime();
+            }
+
+        }
+
+    }
+    public void input(MouseHandler mouse, KeyHandler key){
+        gsm.input(mouse, key);
+    }
+    public void update(double time){
+        gsm.update(time);
+    }
+    public void render(){
+        if(g!=null){
+            g.setColor(new Color(4, 4, 30));
+            g.fillRect(0,0,width,height);
+            gsm.render(g);
+        }
+
+    }
+    public void draw(){
+        Graphics g2 = (Graphics)this.getGraphics();
+        g2.drawImage(img,0,0,width,height,null);
+        g2.dispose();
+    }
+
+}
Index: src/game/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/Main.java b/src/game/Main.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/Main.java	(date 1652572440000)
@@ -0,0 +1,10 @@
+package game;
+
+public class Main {
+    public Main(){
+        new Window();
+    }
+    public static void main(String[] args) {
+        new Main();
+    }
+}
Index: src/game/ui/BuildOptionUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/ui/BuildOptionUI.java b/src/game/ui/BuildOptionUI.java
new file mode 100644
--- /dev/null	(date 1653280225818)
+++ b/src/game/ui/BuildOptionUI.java	(date 1653280225818)
@@ -0,0 +1,127 @@
+//package game.ui;
+//
+//
+//
+//import game.GamePanel;
+//import game.graphics.SpriteSheet;
+//import game.states.GameStateManager;
+//import game.math.Vector2f;
+//
+//import java.awt.image.BufferedImage;
+//
+//public class BuildOptionUI {
+//
+//    private SpriteSheet icons;
+//
+//    private BufferedImage imgButton;
+//    private BufferedImage imgPressed;
+//
+//    private Slots[] parentSlots;
+//
+//    public BuildOptionUI() {
+//        this.icons = new SpriteSheet("ui/icons.png", 32, 32);
+//
+//        this.imgButton = GameStateManager.button.getSubimage(0, 137, 40, 40);
+//        this.imgPressed = GameStateManager.button.getSubimage(41, 137, 40, 40);
+//
+//        this.parentSlots = createBuildingUI();
+//    }
+//
+//    public Slots[] getSlots() {
+//        return parentSlots;
+//    }
+//
+//
+//    private Slots[] createGather(int size, int x, int y, BufferedImage[] slotsHori) {
+//        Button[] btnOptions = new Button[2];
+//        for(int i = 0; i < btnOptions.length; i++) {
+//            btnOptions[i] = new Button(icons.getSprite(i, 1).image, imgButton, new Vector2f(x - (size + 10) * (i + 1), y), size, size, 8);
+//            btnOptions[i].addPressedImage(imgPressed);
+//        }
+//
+//        Vector2f[][] optionsPos = new Vector2f[btnOptions.length][slotsHori.length];
+//
+//        int img = 0;
+//        for(int i = 0; i < btnOptions.length; i++) {
+//            for(int j = 0; j < optionsPos[0].length; j++) {
+//                img = (i == btnOptions.length - 1 && j == btnOptions.length - 1) ? 0 : 1;
+//                optionsPos[i][j] = new Vector2f(
+//                x - ((size + 10) * (i + 1)) + ((size + 12) * ((j + 1) % 2)) - slotsHori[img].getWidth(),
+//                y + ((size + 8) - slotsHori[img].getHeight()) / 2);
+//            }
+//        }
+//
+//        Slots[] optionslots = new Slots[btnOptions.length];
+//        optionslots[0] = new Slots(btnOptions[0], new BufferedImage[] { null, slotsHori[1], slotsHori[1] }, optionsPos[0], 0);
+//        optionslots[1] = new Slots(btnOptions[1], new BufferedImage[] { null, slotsHori[1], slotsHori[0] }, optionsPos[1], 0);
+//
+//        return optionslots;
+//    }
+//
+//    private Slots[] createBuildingUI() {
+//        SpriteSheet slots = new SpriteSheet("ui/slots.png");
+//
+//        BufferedImage imgButton = GameStateManager.button.getSubimage(0, 137, 40, 40);
+//        BufferedImage imgPressed = GameStateManager.button.getSubimage(41, 137, 40, 40);
+//
+//        BufferedImage slotsHori[] = {
+//            slots.getSubimage(409, 80, 14, 24), // ends
+//            slots.getSubimage(389, 76, 4, 32) // chain
+//        };
+//
+//        int size = 40;
+//        int buildSlotX = GamePanel.width - size - 15;
+//        int buildSlotY = GamePanel.height / 3;
+//
+//        Slots[] gatherSlots = createGather(size, buildSlotX, buildSlotY, slotsHori);
+//
+//        BufferedImage slotsVert[] = {
+//            slots.getSubimage(393, 56, 24, 14), // ends
+//            slots.getSubimage(389, 71, 32, 4) // chain
+//        };
+//
+//        Button[] btnBuilding = new Button[3];
+//        for (int i = 0; i < btnBuilding.length; i++) {
+//            btnBuilding[i] = new Button(icons.getSprite(i, 0).image, imgButton,
+//                    new Vector2f(buildSlotX, buildSlotY + ((size + 10) * i)), size, size, 8);
+//            btnBuilding[i].addPressedImage(imgPressed);
+//        }
+//
+//
+//
+//        Vector2f[][] slotsPos = new Vector2f[btnBuilding.length][slotsVert.length];
+//
+//        int img = 0;
+//        for (int i = 0; i < btnBuilding.length; i++) {
+//            for (int j = 0; j < slotsPos[0].length; j++) {
+//                img  = i > 0 ? 1 : j;
+//                slotsPos[i][j] = new Vector2f(
+//                    buildSlotX + ((size + 8) - slotsVert[img].getWidth()) / 2,
+//                    buildSlotY + ((size + 10) * i) + ((size + 18) * (j % 2)) - slotsVert[img].getHeight());
+//            }
+//        }
+//
+//        Slots[] buildingslots = new Slots[btnBuilding.length]; // probably make this a for loop later...
+//        buildingslots[0] = new Slots(btnBuilding[0], gatherSlots, new BufferedImage[] { null, slotsVert[0], slotsVert[1] }, slotsPos[0], 0);
+//        buildingslots[1] = new Slots(btnBuilding[1], new BufferedImage[] { null, slotsVert[1], slotsVert[1] }, slotsPos[1], 0);
+//        buildingslots[2] = new Slots(btnBuilding[2], new BufferedImage[] { null, slotsVert[1], null }, slotsPos[2], 0);
+//
+//        buildingButtons(buildingslots);
+//
+//        return buildingslots;
+//    }
+//
+//    private void buildingButtons(Slots[] buildingslots) {
+//        for(int i = 0; i < buildingslots.length; i++) {
+//            buildingslots[i].getButton().addSlotEvent(e -> {
+//                if(e.isVisibleChildren()) {
+//                    e.showChildren(false);
+//                } else {
+//                    e.showChildren(true);
+//                }
+//            });
+//        }
+//
+//    }
+//
+//}
\ No newline at end of file
Index: src/game/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/Window.java b/src/game/Window.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/Window.java	(date 1652572440000)
@@ -0,0 +1,19 @@
+package game;
+
+import javax.swing.JFrame;
+
+public class Window extends JFrame {
+
+    private GamePanel gp;
+
+    public Window() {
+        setTitle("GAME 2D RPG");
+        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        setContentPane(new GamePanel(1280,720));
+        setIgnoreRepaint(true);
+        pack();
+        setLocationRelativeTo(null);
+
+        setVisible(true);
+    }
+}
Index: src/game/ui/FillBars.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/ui/FillBars.java b/src/game/ui/FillBars.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/ui/FillBars.java	(date 1652572440000)
@@ -0,0 +1,66 @@
+package game.ui;
+
+import game.gameObject.Entity;
+import game.math.Vector2f;
+
+import java.awt.Graphics2D;
+import java.awt.image.BufferedImage;
+
+
+public class FillBars {
+    
+    private BufferedImage[] bar;
+
+    private Entity e;
+
+    private Vector2f pos;
+    private int size;
+    private int length;
+
+    private int energyLength;
+
+    private int barWidthRatio;
+    private int energyWidthRatio;
+
+    private int barHeightRatio;
+    private float percent;
+
+    public FillBars(Entity e, BufferedImage[] sprite, Vector2f pos, int size, int length, float percent) {
+        this.e = e;
+        this.bar = sprite;
+        this.pos = pos;
+        this.size = size;
+        this.length = length;
+        this.percent= percent;
+
+        this.energyLength = (int) ((bar[0].getWidth() + size) * (length * e.getHealthPercent()));
+        this.barWidthRatio = (bar[0].getWidth() + size) * length / (bar[0].getWidth());
+        this.energyWidthRatio = energyLength / (bar[0].getWidth());
+        this.barHeightRatio = (bar[0].getHeight() + size) / bar[0].getHeight();
+    }
+
+    public void render(Graphics2D g, float percent) {
+        int endsWidth = 0;
+        int centerHeight = (int) (pos.y - barHeightRatio - bar[0].getHeight() / 2);
+
+        this.energyLength = (int) ((bar[0].getWidth() + size) * (length * percent));
+        this.energyWidthRatio = this.energyLength / (bar[0].getWidth());
+
+        if(bar[2] != null) {
+            endsWidth = bar[2].getWidth() + size;
+
+            g.drawImage(bar[2], (int) (pos.x), (int) (pos.y), endsWidth, bar[2].getHeight() + size, null);
+            g.drawImage(bar[2], (int) (pos.x + endsWidth * 2 + (bar[0].getWidth() + size) * length) - this.barWidthRatio, (int) (pos.y), -(endsWidth), bar[2].getHeight() + size, null);
+            centerHeight += bar[2].getHeight() / 2 + (bar[2].getHeight() - bar[0].getHeight()) / 2;
+        }
+
+        g.drawImage(bar[0], (int) (pos.x + endsWidth - this.barWidthRatio), centerHeight, (bar[0].getWidth() + size) * length, bar[0].getHeight() + size, null);
+        if(this.energyLength > 0){
+            g.drawImage(bar[1], (int) (pos.x + endsWidth - this.energyWidthRatio), centerHeight, this.energyLength, (int) (bar[0].getHeight() + size), null);
+            }
+
+    }
+
+
+
+}
\ No newline at end of file
Index: src/game/ui/Button.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/ui/Button.java b/src/game/ui/Button.java
new file mode 100644
--- /dev/null	(date 1653280225825)
+++ b/src/game/ui/Button.java	(date 1653280225825)
@@ -0,0 +1,270 @@
+//package game.ui;
+//
+//import game.math.AABB;
+//import game.math.Vector2f;
+//
+//import java.awt.Graphics2D;
+//import java.awt.Graphics;
+//import java.awt.Image;
+//import java.awt.Font;
+//import java.awt.FontMetrics;
+//import java.awt.image.BufferedImage;
+//import java.util.ArrayList;
+//
+//
+//
+//public class Button {
+//
+//    private String label;
+//    private int lbWidth;
+//    private int lbHeight;
+//
+//    private BufferedImage image;
+//    private BufferedImage hoverImage;
+//    private BufferedImage pressedImage;
+//
+//    private Vector2f iPos;
+//    private Vector2f lbPos;
+//
+//    private AABB bounds;
+//    private boolean hovering = false;
+//    private int hoverSize;
+//    private ArrayList<ClickedEvent> events;
+//    private ArrayList<SlotEvent> slotevents;
+//    private boolean clicked = false;
+//    private boolean pressed = false;
+//    private boolean canHover = true;
+//    private boolean drawString = true;
+//
+//    private float pressedtime;
+//    private Slots slot; // temp fix
+//
+//    // ******************************************** ICON CUSTOM POS *******************************************
+//
+//    public Button(BufferedImage icon, BufferedImage image, Vector2f pos, int width, int height, int iconsize) {
+//        this.image = createIconButton(icon, image, width + iconsize, height + iconsize, iconsize);
+//        this.iPos = pos;
+//        this.bounds = new AABB(iPos, this.image.getWidth(), this.image.getHeight());
+//
+//        events = new ArrayList<ClickedEvent>();
+//        slotevents = new ArrayList<SlotEvent>();
+//        this.canHover = false;
+//        this.drawString = false;
+//    }
+//
+//    private BufferedImage createIconButton(BufferedImage icon, BufferedImage image, int width, int height, int iconsize) {
+//        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
+//
+//        if(image.getWidth() != width || image.getHeight() != height) {
+//            image = resizeImage(image, width, height);
+//        }
+//
+//        if(icon.getWidth() != width - iconsize || icon.getHeight() != height - iconsize) {
+//            icon = resizeImage(icon, width - iconsize, height - iconsize);
+//        }
+//
+//        Graphics g = result.getGraphics();
+//        g.drawImage(image, 0, 0, width, height, null);
+//
+//        g.drawImage(icon,
+//            image.getWidth() / 2 - icon.getWidth() / 2,
+//            image.getHeight() / 2 - icon.getHeight() / 2,
+//            icon.getWidth(), icon.getHeight(), null);
+//
+//        g.dispose();
+//
+//        return result;
+//    }
+//
+//    // ******************************************** LABEL TTF CUSTOM MIDDLE POS *******************************************
+//
+//    public Button(String label, BufferedImage image, Font font, Vector2f pos, int buttonSize) {
+//        this(label, image, font, pos, buttonSize, -1);
+//    }
+//
+//    public Button(String label, BufferedImage image, Font font, Vector2f pos, int buttonWidth, int buttonHeight) {
+//        GameStateManager.g.setFont(font);
+//        FontMetrics met = GameStateManager.g.getFontMetrics(font);
+//        int height = met.getHeight();
+//        int width = met.stringWidth(label);
+//
+//        if(buttonWidth == -1) buttonWidth = buttonHeight;
+//
+//        this.label = label;
+//
+//        this.image = createButton(label, image, font, width + buttonWidth, height + buttonHeight, buttonWidth, buttonHeight);
+//        this.iPos = new Vector2f(pos.x - this.image.getWidth() / 2, pos.y - this.image.getHeight() / 2);
+//        this.bounds = new AABB(iPos, this.image.getWidth(), this.image.getHeight());
+//
+//
+//        events = new ArrayList<ClickedEvent>();
+//        this.canHover = false;
+//        this.drawString = false;
+//    }
+//
+//    public BufferedImage createButton(String label, BufferedImage image, Font font, int width, int height, int buttonWidth, int buttonHeight) {
+//        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
+//
+//        if(image.getWidth() != width || image.getHeight() != height) {
+//            image = resizeImage(image, width, height);
+//        }
+//
+//        Graphics g = result.getGraphics();
+//        g.drawImage(image, 0, 0, width, height, null);
+//
+//        g.setFont(font);
+//        g.drawString(label, buttonWidth / 2, (height - buttonHeight));
+//
+//        g.dispose();
+//
+//        return result;
+//    }
+//
+//    private BufferedImage resizeImage(BufferedImage image, int width, int height) {
+//        Image temp = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
+//        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
+//        Graphics2D g = result.createGraphics();
+//
+//        g.drawImage(temp, 0, 0, null);
+//        g.dispose();
+//
+//        return result;
+//    }
+//
+//    // ******************************************** LABEL PNG GAMEPANEL POS *******************************************
+//
+//    public Button(String label, int lbWidth, int lbHeight, BufferedImage image, int iWidth, int iHeight, Vector2f offset) {
+//        this(label, lbWidth, lbHeight, image, iWidth, iHeight);
+//
+//        iPos = new Vector2f((GamePanel.width / 2 - iWidth / 2 + offset.x) , (GamePanel.height / 2 - iHeight / 2 + offset.y));
+//        lbPos = new Vector2f((iPos.x + iWidth / 2 + lbWidth / 2) - ((label.length()) * lbWidth / 2), iPos.y + iHeight / 2 - lbHeight / 2 - 4);
+//
+//        this.bounds = new AABB(iPos, iWidth, iHeight);
+//    }
+//
+//    public Button(String label, int lbWidth, int lbHeight, BufferedImage image, int iWidth, int iHeight) {
+//        this.label = label;
+//        this.lbWidth = lbWidth;
+//        this.lbHeight = lbHeight;
+//        this.image = image;
+//        this.hoverSize = 20;
+//
+//        iPos = new Vector2f((GamePanel.width / 2 - iWidth / 2) , (GamePanel.height / 2 - iHeight / 2));
+//        lbPos = new Vector2f((iPos.x + iWidth / 2 + lbWidth / 2) - ((label.length()) * lbWidth / 2), iPos.y + iHeight / 2 - lbHeight / 2 - 4);
+//
+//        this.bounds = new AABB(iPos, iWidth, iHeight);
+//
+//        events = new ArrayList<ClickedEvent>();
+//    }
+//
+//    // ******************************************** LABEL PNG CUSTOM POS *******************************************
+//
+//    public Button(String label, int lbWidth, int lbHeight, BufferedImage image, Vector2f iPos, int iWidth, int iHeight) {
+//        this(label, new Vector2f((iPos.x + iWidth / 2 + lbWidth / 2) - ((label.length()) * lbWidth / 2), iPos.y + iHeight / 2 - lbHeight / 2 - 4), lbWidth, lbHeight, image, iPos, iWidth, iHeight);
+//    }
+//
+//    public Button(String label, Vector2f lbPos, int lbWidth, int lbHeight, BufferedImage image, Vector2f iPos, int iWidth, int iHeight) {
+//        this(label, lbWidth, lbHeight, image, iWidth, iHeight);
+//
+//        this.iPos = iPos;
+//        this.lbPos = lbPos;
+//
+//        this.bounds = new AABB(iPos, iWidth, iHeight);
+//    }
+//
+//    // ******************************************** END ************************************************************
+//
+//    public void addHoverImage(BufferedImage image) {
+//        this.hoverImage = image;
+//        this.canHover = true;
+//    }
+//
+//    public void addPressedImage(BufferedImage image) {
+//        this.pressedImage = image;
+//    }
+//
+//    public void setHoverSize(int size) { this.hoverSize = size; }
+//	public boolean getHovering() { return hovering; }
+//    public void setHover(boolean b) { this.canHover = b; }
+//    public void addEvent(ClickedEvent e) { events.add(e);}
+//    public void addSlotEvent(SlotEvent e) { slotevents.add(e); }
+//    public void setSlot(Slots slot) { this.slot = slot;} // temp fix
+//
+//    public int getWidth() { return (int) bounds.getWidth(); }
+//    public int getHeight() { return (int) bounds.getHeight(); }
+//    public Vector2f getPos() { return bounds.getPos(); }
+//
+//    public void update(double time) {
+//        if(pressedImage != null && pressed && pressedtime + 300 < time / 1000000) {
+//            pressed = false;
+//        }
+//    }
+//
+//    private void hover(int value) {
+//        if(hoverImage == null) {
+//            iPos.x -= value / 2;
+//            iPos.y -= value / 2;
+//            float iWidth = value + bounds.getWidth();
+//            float iHeight = value + bounds.getHeight();
+//            this.bounds = new AABB(iPos, (int) iWidth, (int) iHeight);
+//
+//            lbPos.x -= value / 2;
+//            lbPos.y -= value / 2;
+//            lbWidth += value / 3;
+//            lbHeight += value / 3;
+//
+//        }
+//
+//        hovering = true;
+//    }
+//
+//    public void input(MouseHandler mouse, KeyHandler key) {
+//        if(bounds.inside(mouse.getX(), mouse.getY())) {
+//            if(canHover && !hovering) {
+//                hover(hoverSize);
+//            }
+//            if(mouse.getButton() == 1 && !clicked) {
+//                clicked = true;
+//                pressed = true;
+//
+//                pressedtime = System.nanoTime() / 1000000;
+//                for(int i = 0; i < events.size(); i++) {
+//                    events.get(i).action(1);
+//                }
+//                if(slotevents == null) return;
+//                for(int i = 0; i < slotevents.size(); i++) {
+//                    slotevents.get(i).action(slot);
+//                }
+//            } else if(mouse.getButton() == -1) {
+//                clicked = false;
+//            }
+//        } else if(canHover && hovering) {
+//            hover(-hoverSize);
+//            hovering = false;
+//        }
+//    }
+//
+//    public void render(Graphics2D g) {
+//        if(drawString) {
+//            SpriteSheet.drawArray(g, label, lbPos, lbWidth, lbHeight);
+//        }
+//
+//        if(canHover && hoverImage != null && hovering) {
+//            g.drawImage(hoverImage, (int) iPos.x, (int) iPos.y, (int) bounds.getWidth(), (int) bounds.getHeight(), null);
+//        } else if(pressedImage != null && pressed) {
+//            g.drawImage(pressedImage, (int) iPos.x, (int) iPos.y, (int) bounds.getWidth(), (int) bounds.getHeight(), null);
+//        } else {
+//            g.drawImage(image, (int) iPos.x, (int) iPos.y, (int) bounds.getWidth(), (int) bounds.getHeight(), null);
+//        }
+//
+//    }
+//
+//    public interface ClickedEvent {
+//        void action(int mouseButton);
+//    }
+//
+//    public interface SlotEvent {
+//        void action(Slots slot);
+//    }
+//
+//}
\ No newline at end of file
Index: src/game/ui/Slots.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/ui/Slots.java b/src/game/ui/Slots.java
new file mode 100644
--- /dev/null	(date 1653280225831)
+++ b/src/game/ui/Slots.java	(date 1653280225831)
@@ -0,0 +1,110 @@
+//package game.ui;
+//
+//
+//import game.util.KeyHandler;
+//import game.util.MouseHandler;
+//import game.math.Vector2f;
+//
+//import java.awt.image.BufferedImage;
+//import java.awt.Graphics2D;
+//
+//public class Slots {
+//
+//    private Vector2f[] pos;
+//    private BufferedImage[] slot; // 1: slot, 2: front || top, 3: back || bottom
+//    private Slots[] childSlots;
+//    private Button button;
+//
+//    private int width;
+//    private int height;
+//
+//    private int size = 0;
+//    private boolean visibility = true;
+//    private boolean showChildren = false;
+//
+//    // Once we have items we will create an items and inventory class
+//    public Slots(BufferedImage[] sprite, Vector2f[] pos, int size) {
+//        this.slot = sprite;
+//        this.pos = pos;
+//        this.size = size;
+//
+//        if(sprite[0] != null) {
+//            this.width = sprite[0].getWidth() + size;
+//            this.height = sprite[0].getHeight() + size;
+//        }
+//    }
+//
+//    public Slots(Button button, BufferedImage[] sprite, Vector2f[] pos, int size) {
+//        this(sprite, new Vector2f[]{ button.getPos(), pos[0], pos[1] }, size); // is this okay?
+//        this.button = button;
+//
+//        this.width = button.getWidth() + size;
+//        this.height = button.getHeight() + size;
+//
+//        this.button.setSlot(this); // temp fix
+//    }
+//
+//    public Slots(Button button, Slots[] childSlots, BufferedImage[] sprite, Vector2f[] pos, int size) {
+//        this(sprite, new Vector2f[]{ button.getPos(), pos[0], pos[1] }, size); // is this okay?
+//        this.button = button;
+//
+//        this.width = button.getWidth() + size;
+//        this.height = button.getHeight() + size;
+//        this.childSlots = childSlots;
+//
+//        this.button.setSlot(this); // temp fix
+//    }
+//
+//    public void setVisible(boolean b) { visibility = b; }
+//    public void showChildren(boolean b) { showChildren = (childSlots != null) ? b : false; }
+//
+//    public Button getButton() { return button; }
+//    public boolean isVisibleChildren() { return showChildren; }
+//
+//    public void update(double time) {
+//        button.update(time);
+//
+//        if(showChildren) {
+//            for(int i = 0; i < childSlots.length; i++) {
+//                childSlots[i].update(time);
+//            }
+//        }
+//    }
+//
+//    public void input(MouseHandler mouse, KeyHandler key) {
+//        button.input(mouse, key);
+//
+//        if(showChildren) {
+//            for(int i = 0; i < childSlots.length; i++) {
+//                childSlots[i].input(mouse, key);
+//            }
+//        }
+//    }
+//
+//    public void render(Graphics2D g) {
+//
+//        if(!visibility) return;
+//
+//        if(button != null) {
+//            button.render(g);
+//        } else {
+//            g.drawImage(slot[0], (int) pos[0].x, (int) pos[0].y, width, height, null);
+//        }
+//        for(int i = 1; i < slot.length; i++) {
+//            if(slot[i] == null) continue;
+//            g.drawImage(slot[i],
+//                        (int) pos[i].x - ((slot[i].getWidth() + size) / slot[i].getWidth()) + 1,
+//                        (int) pos[i].y - ((slot[i].getHeight() + size) / slot[i].getHeight()) + 1,
+//                        slot[i].getWidth() + size,
+//                        slot[i].getHeight() + size, null);
+//        }
+//
+//        if(showChildren) {
+//            for(int i = 0; i < childSlots.length; i++) {
+//                childSlots[i].render(g);
+//            }
+//        }
+//
+//    }
+//
+//}
\ No newline at end of file
Index: src/game/ui/PlayerUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/ui/PlayerUI.java b/src/game/ui/PlayerUI.java
new file mode 100644
--- /dev/null	(date 1653279579663)
+++ b/src/game/ui/PlayerUI.java	(date 1653279579663)
@@ -0,0 +1,58 @@
+package game.ui;
+
+
+import game.gameObject.Player;
+import game.graphics.SpriteSheet;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+import game.math.Vector2f;
+
+import java.awt.Graphics2D;
+import java.awt.image.BufferedImage;
+
+public class PlayerUI {
+
+    private FillBars healthbar;
+    private FillBars manaBar;
+    Player p;
+//    private Slots[] buildingslots;
+
+    public PlayerUI(Player p) {
+        this.p =p;
+
+        SpriteSheet bars = new SpriteSheet("res/ui/fillbars.png");
+        BufferedImage[] hpBarSprite = {
+            bars.getSubimage(12, 2, 7, 16),
+            bars.getSubimage(39, 0, 7, 14), // red health bar
+            bars.getSubimage(0, 0, 12, 20) };
+        
+        Vector2f pos = new Vector2f(16,  16);
+        this.healthbar = new FillBars(p, hpBarSprite, pos, 16, 16,p.getHealthPercent());
+
+        BufferedImage[] manaBarSprite = {
+                bars.getSubimage(12, 2, 7, 16),
+                bars.getSubimage(39, 17, 7, 14), // red health bar
+                bars.getSubimage(0, 0, 12, 20) };
+
+        pos = new Vector2f(16, 50);
+        this.manaBar = new FillBars(p, manaBarSprite, pos, 10, 16,p.getHealthPercent());
+        
+//        BuildOptionUI boUI = new BuildOptionUI();
+//        buildingslots = boUI.getSlots();
+    }
+
+    
+    public void update(double time) {
+
+    }
+
+    public void input(MouseHandler mouse, KeyHandler key) {
+
+    }
+
+    public void render(Graphics2D g) {
+        healthbar.render(g,p.getHealthPercent());
+        manaBar.render(g,p.getManapercent());
+    }
+
+}
\ No newline at end of file
Index: src/game/math/AABB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/math/AABB.java b/src/game/math/AABB.java
new file mode 100644
--- /dev/null	(date 1653280211465)
+++ b/src/game/math/AABB.java	(date 1653280211465)
@@ -0,0 +1,91 @@
+package game.math;
+
+import game.gameObject.Entity;
+
+// Axis-Aligned Bounding Box And Circle
+
+public class AABB {
+    private Vector2f pos;
+    private float xOffset =0;
+    private float yOffset =0;
+    private float w;
+    private float h;
+    private float r;
+    private int size;
+    private Entity e;
+
+    //BOX
+    public AABB(Vector2f pos, int w, int h){
+        this.pos=pos;
+        this.w=w;
+        this.h=h;
+        size = Math.max(w,h);
+    }
+    //CIRCLE
+    public AABB(Vector2f pos, int r){
+        this.pos= pos;
+        this.r =r;
+        size =r;
+    }
+    public Vector2f getPos(){ return pos;}
+    public float getRadius(){ return r;}
+    public float getWidth(){ return w;}
+    public float getHeight(){ return h;}
+
+    public void setBox(Vector2f pos, int w, int h){
+        this.pos = pos;
+        this.w=w;
+        this.h=h;
+        size = Math.max(w,h);
+    }
+    public void setCircle(Vector2f pos, int r, Entity e){
+        this.pos= pos;
+        this.r =r;
+        this.e =e;
+        size =r;
+    }
+    public void setWidth(float f){ w=f ;}
+    public void setHeight(float f) { h = f; }
+
+    public void setXOffset(float f) { xOffset = f; }
+    public void setYOffset(float f) { yOffset = f; }
+    public float getXOffset() { return xOffset; }
+    public float getYOffset() { return yOffset; }
+
+    public float distance(Vector2f other) {
+        float dx = pos.x - other.x;
+        float dy = pos.y - other.y;
+        return (float) Math.sqrt(dx * dx + dy * dy);
+    }
+
+    public boolean collides(AABB bBox){
+        float ax= ((pos.getWorldVar().x + (xOffset))+ (this.w/2));
+        float ay= ((pos.getWorldVar().y + (yOffset))+ (this.h/2));
+        float bx= ((bBox.getPos().getWorldVar().x + (bBox.xOffset))+ (bBox.getWidth()/2));
+        float by= ((bBox.getPos().getWorldVar().y + (bBox.yOffset))+ (bBox.getHeight()/2));
+
+        if (Math.abs(ax - bx) < (this.w / 2) + (bBox.getWidth() / 2)) {
+            if (Math.abs(ay - by) < (this.h / 2) + (bBox.getHeight() / 2)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public boolean colCircleBox(AABB aBox) {
+        float dx= Math.max(aBox.getPos().getWorldVar().x + aBox.getXOffset(),Math.min(pos.getWorldVar().x +(r/2),aBox.getPos().getWorldVar().x +aBox.getXOffset()+ aBox.getWidth()));
+        float dy= Math.max(aBox.getPos().getWorldVar().y + aBox.getYOffset(),Math.min(pos.getWorldVar().y +(r/2),aBox.getPos().getWorldVar().y +aBox.getYOffset()+ aBox.getHeight()));
+
+        dx= pos.getWorldVar().x+(r/2) -dx;
+        dy= pos.getWorldVar().y+(r/2) -dy;
+
+        if(Math.sqrt(dx*dx+dy*dy)< r/2){
+            return true;
+        }
+        return false;
+    }
+
+
+
+
+}
Index: src/game/math/Vector2f.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/math/Vector2f.java b/src/game/math/Vector2f.java
new file mode 100644
--- /dev/null	(date 1652719250428)
+++ b/src/game/math/Vector2f.java	(date 1652719250428)
@@ -0,0 +1,61 @@
+package game.math;
+
+public class Vector2f {
+    public float x;
+    public float y;
+
+
+    public static float worldX;
+    public static float worldY;
+
+    public Vector2f(Vector2f vec) {
+       this.x = vec.x;
+       this.y = vec.y;
+    }
+
+    public Vector2f(float x, float y) {
+        this.x = x;
+        this.y = y;
+
+    }
+
+    public void addX(float f) { x += f; }
+    public void addY(float f) { y += f; }
+
+    public void setX(float f) { x = f; }
+    public void setY(float f) { y = f; }
+
+    public void setVector(Vector2f vec) {
+        this.x = vec.x;
+        this.y = vec.y;
+    }
+    public void setVector(float x, float y) {
+        this.x = x;
+        this.y = y;
+    }
+
+    public static void setWorldVar(float x, float y) {
+        worldX = x;
+        worldY = y;
+    }
+
+    public static float getWorldVarX(float x) {
+        return x - worldX;
+    }
+
+    public static float getWorldVarY(float y) {
+        return y - worldY;
+    }
+
+    public Vector2f getWorldVar() {
+        return new Vector2f(x - worldX, y - worldY);
+    }
+
+    public Vector2f getCamVar(){
+        return new Vector2f((x+ worldX),(y+ worldY));
+    }
+    @Override
+    public String toString() {
+        return x + ", " + y;
+    }
+}
Index: src/game/tile/TileMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/TileMap.java b/src/game/tile/TileMap.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/TileMap.java	(date 1652572440000)
@@ -0,0 +1,10 @@
+package game.tile;
+
+import game.math.AABB;
+
+import java.awt.Graphics2D;
+
+public abstract class TileMap {
+
+    public abstract void render(Graphics2D g, AABB cam);
+}
Index: src/game/tile/TileManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/TileManager.java b/src/game/tile/TileManager.java
new file mode 100644
--- /dev/null	(date 1653148803029)
+++ b/src/game/tile/TileManager.java	(date 1653148803029)
@@ -0,0 +1,116 @@
+package game.tile;
+
+
+import game.graphics.SpriteSheet;
+import game.util.Camera;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import java.awt.Graphics2D;
+import java.io.File;
+import java.util.ArrayList;
+
+public class TileManager {
+
+    public static ArrayList<TileMap> tm;
+    private Camera cam;
+    private SpriteSheet spritesheet;
+
+
+    private int width;
+    private int height;
+
+
+    private String file;
+    private int columns;
+
+    public TileManager() {
+        tm = new ArrayList<TileMap>();
+    }
+
+    public TileManager(String path, Camera cam) {
+        this();
+        addTileMap(path, 64, 64, cam);
+    }
+
+    private void addTileMap(String path, int blockWidth, int blockHeight, Camera cam) {
+        this.cam = cam;
+        cam.setTileSize(blockWidth);
+        String imagePath;
+
+        int width = 0;
+        int height = 0;
+        int tileWidth;
+        int tileHeight;
+        int tileColumns;
+        int layers = 0;
+        SpriteSheet sprite;
+
+        String[] data = new String[10];
+
+        try {
+            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
+            DocumentBuilder builder = builderFactory.newDocumentBuilder();
+            Document doc = builder.parse(new File(getClass().getClassLoader().getResource(path).toURI()));
+            doc.getDocumentElement().normalize();
+
+            NodeList list = doc.getElementsByTagName("tileset");
+            Node node = list.item(0);
+            Element eElement = (Element) node;
+
+            imagePath = eElement.getAttribute("name");
+            tileWidth = Integer.parseInt(eElement.getAttribute("tilewidth"));
+            tileHeight = Integer.parseInt(eElement.getAttribute("tileheight"));
+            tileColumns =  Integer.parseInt(eElement.getAttribute("columns"));
+
+            this.columns = tileColumns;
+            this.file = imagePath;
+            sprite = new SpriteSheet("res/tile/" + imagePath + ".png", tileWidth, tileHeight);
+
+            list = doc.getElementsByTagName("layer");
+            layers = list.getLength();
+
+            for(int i = 0; i < layers; i++) {
+                node = list.item(i);
+                eElement = (Element) node;
+                if(i <= 0) {
+                    width = Integer.parseInt(eElement.getAttribute("width"));
+                    height = Integer.parseInt(eElement.getAttribute("height"));
+                }
+
+                data[i] = eElement.getElementsByTagName("data").item(0).getTextContent();
+
+                if(i >= 1) {
+                    tm.add(new TileMapNorm(data[i], sprite, width, height, blockWidth, blockHeight, tileColumns));
+                } else {
+                    tm.add(new TileMapObj(data[i], sprite, width, height, blockWidth, blockHeight, tileColumns));
+                }
+            }
+
+            cam.setLimit(width * blockWidth, height * blockHeight);
+        } catch(Exception e) {
+            System.out.println("ERROR - TILEMANAGER: can not read tilemap:");
+            e.printStackTrace();
+            System.exit(0);
+        }
+
+        this.width = width;
+        this.height = height;
+    }
+
+
+
+    public void render(Graphics2D g) {
+        if(cam == null)
+            return;
+
+        for(int i = 0; i < tm.size(); i++) {
+            tm.get(i).render(g, cam.getBounds());
+        }
+    }
+
+}
Index: src/game/tile/TileMapObj.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/TileMapObj.java b/src/game/tile/TileMapObj.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/TileMapObj.java	(date 1652572440000)
@@ -0,0 +1,58 @@
+package game.tile;
+
+
+import game.graphics.SpriteSheet;
+import game.tile.blocks.Block;
+import game.tile.blocks.HoleBlock;
+import game.tile.blocks.ObjBlock;
+import game.math.AABB;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public class TileMapObj extends TileMap {
+
+    public static Block[] event_blocks;
+
+    private int tileWidth;
+    private int tileHeight;
+
+    public static int width;
+    public static int height;
+
+    public TileMapObj(String data, SpriteSheet spriteSheet, int width, int height, int tileWidth, int tileHeight, int tileColumns) {
+        Block tempBlock;
+        event_blocks = new Block[width * height];
+
+        this.tileWidth = tileWidth;
+        this.tileHeight = tileHeight;
+
+        TileMapObj.width = width;
+        TileMapObj.height = height;
+
+        String[] block = data.split(",");
+        for(int i = 0; i < (width * height); i++) {
+            int temp = Integer.parseInt(block[i].replaceAll("\\s+",""));
+             if(temp != 0) {
+                 if(temp == 172) {
+                     tempBlock = new HoleBlock(spriteSheet.getSprite((int) ((temp - 1) % tileColumns), (int) ((temp - 1) / tileColumns) ), new Vector2f((int) (i % width) * tileWidth, (int) (i / height) * tileHeight), tileWidth, tileHeight);
+                 } else {
+                     tempBlock = new ObjBlock(spriteSheet.getSprite((int) ((temp - 1) % tileColumns), (int) ((temp - 1) / tileColumns) ), new Vector2f((int) (i % width) * tileWidth, (int) (i / height) * tileHeight), tileWidth, tileHeight);
+                 }
+                 event_blocks[i] = tempBlock;
+             }
+        }
+    }
+
+    public void render(Graphics2D g, AABB cam) {
+        int x = (int) ((cam.getPos().x) / tileWidth);
+        int y = (int) ((cam.getPos().y) / tileHeight);
+
+        for(int i = x; i < x + (cam.getWidth() / tileWidth); i++) {
+            for(int j = y; j < y + (cam.getHeight() / tileHeight); j++) {
+                if(i + (j * height) > -1 && i + (j * height) < event_blocks.length && event_blocks[i + (j * height)] != null)
+                    event_blocks[i + (j * height)].render(g);
+            }
+        }
+    }
+}
Index: src/game/tile/TileMapNorm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/TileMapNorm.java b/src/game/tile/TileMapNorm.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/TileMapNorm.java	(date 1652572440000)
@@ -0,0 +1,51 @@
+package game.tile;
+
+import game.graphics.SpriteSheet;
+import game.tile.blocks.Block;
+import game.tile.blocks.NormBlock;
+import game.math.AABB;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public class TileMapNorm extends TileMap {
+
+    public Block[] blocks;
+
+    private int tileWidth;
+    private int tileHeight;
+
+    private int height;
+
+    public TileMapNorm(String data, SpriteSheet spriteSheet, int width, int height, int tileWidth, int tileHeight, int tileColumns) {
+        blocks = new Block[width * height];
+
+        this.tileWidth = tileWidth;
+        this.tileHeight = tileHeight;
+
+        this.height = height;
+
+        String[] block = data.split(",");
+
+        for(int i = 0; i < (width * height); i++) {
+            int temp = Integer.parseInt(block[i].replaceAll("\\s+",""));
+            if(temp != 0) {
+                blocks[i] = new NormBlock(spriteSheet.getSprite((int) ((temp - 1) % tileColumns), (int) ((temp - 1) / tileColumns) ), new Vector2f((int) (i % width) * tileWidth, (int) (i / height) * tileHeight), tileWidth, tileHeight);
+            }
+        }
+    }
+
+    public void render(Graphics2D g, AABB cam) {
+        int x = (int) ((cam.getPos().x) / tileWidth);
+        int y = (int) ((cam.getPos().y) / tileHeight);
+
+        for(int i = x; i < x + (cam.getWidth() / tileWidth); i++) {
+            for(int j = y; j < y + (cam.getHeight() / tileHeight); j++) {
+                if(i + (j * height) > -1 && i + (j * height) < blocks.length && blocks[i + (j * height)] != null) {
+                    blocks[i + (j * height)].render(g);
+                }
+            }
+        }
+    }
+
+}
Index: src/game/util/KeyHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/util/KeyHandler.java b/src/game/util/KeyHandler.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/util/KeyHandler.java	(date 1652572440000)
@@ -0,0 +1,85 @@
+package game.util;
+
+import game.GamePanel;
+
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class KeyHandler implements KeyListener {
+    public static List<Key> keys = new ArrayList<Key>();
+    public class Key{
+        public int presses, absorbs;
+        public boolean down, clicked;
+
+        public Key() {
+            keys.add(this);
+        }
+        public void toggle(boolean pressed) {
+            if(pressed != down){
+                down = pressed;
+            }
+            if(pressed){
+                presses++;
+            }
+        }
+        public void tick() {
+            if(absorbs < presses){
+                absorbs++;
+                clicked= true;
+            }else {
+                clicked = false;
+            }
+        }
+    }
+
+    public Key up = new Key();
+    public Key down = new Key();
+    public Key left = new Key();
+    public Key right = new Key();
+    public Key attack = new Key();
+    public Key menu = new Key();
+    public Key enter = new Key();
+    public Key escape = new Key();
+    public Key shift = new Key();
+
+    public KeyHandler(GamePanel game){
+        game.addKeyListener(this);
+    }
+
+    public void releaseAll(){
+        for(int i=0; i< keys.size(); i++){
+            keys.get(i).down = false;
+        }
+    }
+    public void tick(){
+        for(int i=0; i< keys.size(); i++){
+            keys.get(i).tick();
+        }
+    }
+    public void toggle(KeyEvent e, boolean pressed) {
+        if(e.getKeyCode() == KeyEvent.VK_W) up.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_S) down.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_A) left.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_D) right.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_SPACE) attack.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_E) menu.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_ENTER) enter.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_ESCAPE) escape.toggle(pressed);
+        if(e.getKeyCode() == KeyEvent.VK_SHIFT) shift.toggle(pressed);
+    }
+    @Override
+    public void keyTyped(KeyEvent e) {}
+
+    @Override
+    public void keyPressed(KeyEvent e) {
+        toggle(e, true);
+    }
+
+    @Override
+    public void keyReleased(KeyEvent e) {
+        toggle(e, false);
+    }
+}
Index: src/game/util/Camera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/util/Camera.java b/src/game/util/Camera.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/util/Camera.java	(date 1652572440000)
@@ -0,0 +1,224 @@
+package game.util;
+
+import game.GamePanel;
+import game.gameObject.Entity;
+import game.math.AABB;
+import game.math.Vector2f;
+import game.states.PlayState;
+
+import java.awt.Graphics;
+
+public class Camera {
+
+    private AABB collisionCam;
+
+    private boolean up;
+    private boolean down;
+    private boolean left;
+    private boolean right;
+
+    private float dx;
+    private float dy;
+    private float maxSpeed = 8f;
+    private float acc = 3f;
+    private float deacc = 0.3f;
+
+    private int widthLimit;
+    private int heightLimit;
+
+    private int tileSize = 64;
+
+    private Entity e;
+
+    public Camera(AABB collisionCam) {
+        this.collisionCam = collisionCam;
+    }
+
+    public void setLimit(int widthLimit, int heightLimit) {
+        this.widthLimit = widthLimit;
+        this.heightLimit = heightLimit;
+    }
+
+    public void setTileSize(int tileSize) {
+        this.tileSize = tileSize;
+    }
+
+    public Entity getTarget() { return e; }
+
+    public Vector2f getPos() {
+        return collisionCam.getPos();
+    }
+    public AABB getBounds() {
+        return collisionCam;
+    }
+
+    public void update() {
+        move();
+        if(e != null) {
+            if (!e.xCol) {
+                if ((e.getPos().getWorldVar().x + dy) < Vector2f.getWorldVarX(widthLimit - collisionCam.getWidth() / 2) + tileSize
+                        && (e.getPos().getWorldVar().x + dy) > Vector2f.getWorldVarX(GamePanel.width / 2 - tileSize * 2)) {
+                    PlayState.map.x += dx;
+                    collisionCam.getPos().x += dx;
+                    //bounds.getPos().x += dx;
+                }
+            }
+            if (!e.yCol) {
+                if ((e.getPos().getWorldVar().y + dy) < Vector2f.getWorldVarY(heightLimit - collisionCam.getHeight() / 2) + tileSize
+                        && (e.getPos().getWorldVar().y + dy) > Vector2f.getWorldVarY(GamePanel.height / 2 - tileSize * 2)) {
+                    PlayState.map.y += dy;
+                    collisionCam.getPos().y += dy;
+                    //bounds.getPos().y += dy;
+                }
+            }
+        } else {
+            if(collisionCam.getPos().x + dx > 0
+                    && collisionCam.getPos().getWorldVar().x + dx < Vector2f.getWorldVarX(widthLimit - collisionCam.getWidth()) - tileSize) {
+                PlayState.map.x += dx;
+                collisionCam.getPos().x += dx;
+            }
+
+            if(collisionCam.getPos().y + dy > 0
+                    && collisionCam.getPos().getWorldVar().y + dy < Vector2f.getWorldVarY(heightLimit - collisionCam.getHeight()) - tileSize) {
+                PlayState.map.y += dy;
+                collisionCam.getPos().y += dy;
+            }
+        }
+    }
+
+    private void move() {
+        if (up) {
+            dy -= acc;
+            if (dy < -maxSpeed) {
+                dy = -maxSpeed;
+            }
+        } else {
+            if (dy < 0) {
+                dy += deacc;
+                if (dy > 0) {
+                    dy = 0;
+                }
+            }
+        }
+        if (down) {
+            dy += acc;
+            if (dy > maxSpeed) {
+                dy = maxSpeed;
+            }
+        } else {
+            if (dy > 0) {
+                dy -= deacc;
+                if (dy < 0) {
+                    dy = 0;
+                }
+            }
+        }
+        if (left) {
+            dx -= acc;
+            if (dx < -maxSpeed) {
+                dx = -maxSpeed;
+            }
+        } else {
+            if (dx < 0) {
+                dx += deacc;
+                if (dx > 0) {
+                    dx = 0;
+                }
+            }
+        }
+        if (right) {
+            dx += acc;
+            if (dx > maxSpeed) {
+                dx = maxSpeed;
+            }
+        } else {
+            if (dx > 0) {
+                dx -= deacc;
+                if (dx < 0) {
+                    dx = 0;
+                }
+            }
+        }
+    }
+
+    public void target(Entity e) {
+        this.e = e;
+        if(e != null) {
+            acc = e.getAcc();
+            deacc = e.getDeacc();
+            maxSpeed = e.getMaxSpeed();
+        } else {
+            acc = 3;
+            deacc = 0.3f;
+            maxSpeed = 8;
+        }
+    }
+
+    public void setMaxSpeed(int maxSpeed) {this.maxSpeed = maxSpeed; }
+
+    public void input(MouseHandler mouse, KeyHandler key) {
+
+        if (e == null) {
+            if (key.up.down) {
+                up = true;
+            } else {
+                up = false;
+            }
+            if (key.down.down) {
+                down = true;
+            } else {
+                down = false;
+            }
+            if (key.left.down) {
+                left = true;
+            } else {
+                left = false;
+            }
+            if (key.right.down) {
+                right = true;
+            } else {
+                right = false;
+            }
+        } else {
+            if (!e.yCol) {
+                if (collisionCam.getPos().y + collisionCam.getHeight() / 2 + dy > e.getPos().y + e.getSize() / 2 + e.getDy() + 2) {
+                    up = true;
+                    down = false;
+                } else if (collisionCam.getPos().y + collisionCam.getHeight() / 2 + dy < e.getPos().y + e.getSize() / 2 + e.getDy() - 2) {
+                    down = true;
+                    up = false;
+                } else {
+                    dy = 0;
+                    up = false;
+                    down = false;
+                }
+            }
+
+            if (!e.xCol) {
+                if (collisionCam.getPos().x + collisionCam.getWidth() / 2  + dx > e.getPos().x + e.getSize() / 2 + e.getDx() + 2) {
+                    left = true;
+                    right = false;
+                } else if (collisionCam.getPos().x + collisionCam.getWidth() / 2 + dx < e.getPos().x + e.getSize() / 2 + e.getDx() - 2) {
+                    right = true;
+                    left = false;
+                } else {
+                    dx = 0;
+                    right = false;
+                    left = false;
+                }
+            }
+        }
+    }
+
+    public void render(Graphics g) {
+        /* g.setColor(Color.blue);
+        g.drawRect((int) collisionCam.getPos().getWorldVar().x, (int) collisionCam.getPos().getWorldVar().y, (int) collisionCam.getWidth(),
+                (int) collisionCam.getHeight()); */
+
+
+         /* g.setColor(Color.magenta);
+         g.drawLine(GamePanel.width / 2, 0, GamePanel.width / 2, GamePanel.height);
+         g.drawLine(0, GamePanel.height / 2, GamePanel.width,GamePanel.height / 2); */
+
+    }
+}
\ No newline at end of file
Index: src/game/util/TileCollision.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/util/TileCollision.java b/src/game/util/TileCollision.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/util/TileCollision.java	(date 1652572440000)
@@ -0,0 +1,52 @@
+package game.util;
+import game.gameObject.Entity;
+import game.tile.TileMapObj;
+import game.tile.blocks.Block;
+import game.tile.blocks.HoleBlock;
+
+public class TileCollision {
+
+    private Entity e;
+
+    public TileCollision(Entity e) {
+        this.e = e;
+    }
+
+    public boolean collisionTile(float ax, float ay) {
+        for (int c = 0; c < 4; c++) {
+            int xt = (int) ((e.getPos().x + ax) + (c % 2) * e.getBounds().getWidth() + e.getBounds().getXOffset()) / 64;
+            int yt = (int) ((e.getPos().y + ay) + (c / 2) * e.getBounds().getHeight() + e.getBounds().getYOffset()) / 64;
+
+            if (TileMapObj.event_blocks[xt + (yt * TileMapObj.height)] instanceof Block) {
+                    Block block = TileMapObj.event_blocks[xt + (yt * TileMapObj.height)];
+                    if (block instanceof HoleBlock) {
+                        return collisionHole(ax, ay, xt, yt, block);
+                    }
+                    return block.update(e.getBounds());
+                }
+            }
+        return false;
+    }
+
+    private boolean collisionHole(float ax, float ay, float xt, float yt, Block block) {
+        int nextXt = (int) ((( (e.getPos().x + ax) + e.getBounds().getXOffset()) / 64) + e.getBounds().getWidth() / 64);
+        int nextYt = (int) ((( (e.getPos().y + ay) + e.getBounds().getYOffset()) / 64) + e.getBounds().getHeight() / 64);
+
+        if(block.isInside(e.getBounds())) {
+            e.setFallen(true);
+            return false;
+        }
+        else if((nextXt == yt + 1) || (nextXt == xt + 1) || (nextYt == yt - 1) || (nextXt == xt - 1)) {
+            if (TileMapObj.event_blocks[nextXt + (nextYt * TileMapObj.height)] instanceof HoleBlock) {
+                if(e.getBounds().getPos().x > block.getPos().x) {
+                    e.setFallen(true);
+                }
+                return false;
+            }
+        }
+        e.setFallen(false);
+        return false;
+    }
+
+}
+
Index: src/game/util/MouseHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/util/MouseHandler.java b/src/game/util/MouseHandler.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/util/MouseHandler.java	(date 1652572440000)
@@ -0,0 +1,63 @@
+package game.util;
+
+
+import game.GamePanel;
+
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+import java.awt.event.MouseMotionListener;
+
+public class MouseHandler implements MouseListener, MouseMotionListener {
+    private static int mouseX= -1;
+    private static int mouseY= -1;
+    private static int mouseB= -1;
+
+    public MouseHandler(GamePanel game){
+        game.addMouseListener(this);
+    }
+    public int getX(){
+        return mouseX;
+    }
+    public int getY() {
+        return mouseY;
+    }
+
+    public int getButton() {
+        return mouseB;
+    }
+    @Override
+    public void mouseClicked(MouseEvent e) {
+
+    }
+
+    @Override
+    public void mousePressed(MouseEvent e) {
+        mouseB= e.getButton();
+    }
+
+    @Override
+    public void mouseReleased(MouseEvent e) {
+        mouseB= -1;
+    }
+
+    @Override
+    public void mouseEntered(MouseEvent e) {
+
+    }
+
+    @Override
+    public void mouseExited(MouseEvent e) {
+
+    }
+
+    @Override
+    public void mouseDragged(MouseEvent e) {
+        mouseX= e.getX();
+        mouseY= e.getY();
+    }
+
+    @Override
+    public void mouseMoved(MouseEvent e) {
+
+    }
+}
Index: src/game/states/GameState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/GameState.java b/src/game/states/GameState.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/states/GameState.java	(date 1652572440000)
@@ -0,0 +1,16 @@
+package game.states;
+
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import java.awt.*;
+
+public abstract class GameState {
+    protected GameStateManager gsm;
+    public GameState(GameStateManager gsm) {
+        this.gsm= gsm;
+    }
+    public abstract void update(double time);
+    public abstract void input(MouseHandler mouse, KeyHandler key);
+    public abstract void render(Graphics2D g);
+}
Index: src/game/states/GameOverState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/GameOverState.java b/src/game/states/GameOverState.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/states/GameOverState.java	(date 1652572440000)
@@ -0,0 +1,27 @@
+package game.states;
+
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import java.awt.*;
+
+public class GameOverState extends GameState {
+    public GameOverState(GameStateManager gsm) {
+        super(gsm);
+    }
+
+    @Override
+    public void update(double time) {
+
+    }
+
+    @Override
+    public void input(MouseHandler mouse, KeyHandler key) {
+
+    }
+
+    @Override
+    public void render(Graphics2D g) {
+
+    }
+}
Index: src/game/graphics/Fontf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/graphics/Fontf.java b/src/game/graphics/Fontf.java
new file mode 100644
--- /dev/null	(date 1653234319451)
+++ b/src/game/graphics/Fontf.java	(date 1653234319451)
@@ -0,0 +1,28 @@
+package game.graphics;
+
+import java.util.HashMap;
+import java.awt.Font;
+
+public class Fontf {
+    private HashMap<String, Font> fonts;
+
+    public Fontf() {
+        fonts = new HashMap<String, Font>();
+    }
+
+    public void loadFont(String path, String name) {
+        try {
+            System.out.println("Loading: " + path + "...");
+            Font font = Font.createFont(Font.TRUETYPE_FONT, getClass().getClassLoader().getResourceAsStream(path));
+
+            fonts.put(name, font);
+        } catch (Exception e) {
+            System.out.println("ERROR: ttfFont - can't load font " + path + "...");
+            e.printStackTrace();
+        }
+    }
+
+    public Font getFont(String name) {
+        return fonts.get(name);
+    }
+}
Index: src/game/states/MenuState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/MenuState.java b/src/game/states/MenuState.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/states/MenuState.java	(date 1652572440000)
@@ -0,0 +1,27 @@
+package game.states;
+
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import java.awt.*;
+
+public class MenuState extends GameState {
+    public MenuState(GameStateManager gsm) {
+        super(gsm);
+    }
+
+    @Override
+    public void update(double time) {
+
+    }
+
+    @Override
+    public void input(MouseHandler mouse, KeyHandler key) {
+
+    }
+
+    @Override
+    public void render(Graphics2D g) {
+
+    }
+}
Index: src/game/states/GameStateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/GameStateManager.java b/src/game/states/GameStateManager.java
new file mode 100644
--- /dev/null	(date 1653279206877)
+++ b/src/game/states/GameStateManager.java	(date 1653279206877)
@@ -0,0 +1,115 @@
+package game.states;
+
+import game.GamePanel;
+import game.graphics.Font;
+
+import game.graphics.Fontf;
+import game.graphics.SpriteSheet;
+import game.math.AABB;
+import game.util.Camera;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+import game.math.Vector2f;
+
+
+import java.awt.Graphics2D;
+
+public class GameStateManager {
+
+    private GameState states[];
+    public static Vector2f map;
+
+
+    public static final int TITLE = 0;
+    public static final int PLAY = 1;
+    public static final int PAUSE = 2;
+    public static final int GAMEOVER = 3;
+
+
+    public static Camera cam;
+    public Graphics2D g;
+
+    public static Font font;
+    public static Fontf fontf;
+
+
+    public GameStateManager(Graphics2D g){
+        this.g=g;
+        map = new Vector2f( GamePanel.width, GamePanel.height);
+        Vector2f.setWorldVar(map.x, map.y);
+        states= new GameState[10];
+
+        font = new Font("res/font/font.png",10,10);
+        SpriteSheet.currentFont = font;
+
+        fontf = new Fontf();
+        fontf.loadFont("res/font/Stackedpixel.ttf", "MeatMadness");
+        fontf.loadFont("res/font/MotionPersonalUseBold-2O0od.ttf", "MotionBold");
+        fontf.loadFont("res/font/x12y16pxMaruMonica.ttf", "MaruMonica");
+
+        cam = new Camera(new AABB(new Vector2f(-64, -64), GamePanel.width + 128, GamePanel.height + 128));
+        states[TITLE]= new TitleState(this);
+    }
+    public boolean isStateActive(int state) {
+        return states[state] != null;
+    }
+
+    public GameState getState(int state) {
+        return states[state];
+    }
+
+    public void pop(int state) {
+        states[state] = null;
+    }
+    public void add(int state) {
+        if (states[state] != null)
+            return;
+
+        if (state == PLAY) {
+            cam = new Camera(new AABB(new Vector2f(0, 0), GamePanel.width + 64, GamePanel.height + 64));
+            states[PLAY] = new PlayState(this,cam);
+        }
+        else if (state == TITLE) {
+            states[TITLE] = new MenuState(this);
+        }
+        else if (state == PAUSE) {
+            states[PAUSE] = new PauseState(this);
+        }
+        else if (state == GAMEOVER) {
+            states[GAMEOVER] = new GameOverState(this);
+        }
+    }
+
+    public void addAndpop(int state) {
+        addAndpop(state, 0);
+    }
+
+    public void addAndpop(int state, int remove) {
+        pop(state);
+        add(state);
+    }
+
+    public void update(double time) {
+        for (int i = 0; i < states.length; i++) {
+            if (states[i] != null) {
+                states[i].update(time);
+            }
+        }
+    }
+    public void input(MouseHandler mouse, KeyHandler key){
+        for(int i=0; i< states.length;i++) {
+            if (states[i] != null) {
+                states[i].input(mouse, key);
+            }
+        }
+    }
+
+    public void render(Graphics2D g){
+        for(int i=0; i< states.length;i++){
+            if (states[i] != null) {
+                states[i].render(g);
+            }
+        }
+    }
+
+}
Index: src/game/states/PlayState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/PlayState.java b/src/game/states/PlayState.java
new file mode 100644
--- /dev/null	(date 1653212827461)
+++ b/src/game/states/PlayState.java	(date 1653212827461)
@@ -0,0 +1,82 @@
+package game.states;
+
+import game.GamePanel;
+
+import game.data.GameControl;
+import game.gameObject.Player;
+import game.gameObject.object.OBJ_Door;
+import game.graphics.SpriteSheet;
+import game.ui.PlayerUI;
+import game.util.Camera;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public class PlayState extends GameState {
+
+    private Player player;
+    public static Vector2f map;
+    private Camera cam;
+    private PlayerUI pui;
+    private GameControl gc;
+
+    public PlayState(GameStateManager gsm, Camera cam) {
+        super(gsm);
+        map = new Vector2f(0,0);
+        Vector2f.setWorldVar(map.x,map.y);
+        this.cam = cam;
+        player = new Player(cam, new SpriteSheet("res/entity/linkFormatted.png", 32, 32), new Vector2f(0 + (GamePanel.width / 2) - 32, 0 + (GamePanel.height / 2) - 32), 64);
+        gc = new GameControl(player, cam, gsm);
+        cam.target(player);
+        pui = new PlayerUI(player);
+    }
+
+    public void update(double time) {
+        Vector2f.setWorldVar(map.x,map.y);
+        if(!gsm.isStateActive(GameStateManager.PAUSE)) {
+            if (player.getDeath()) {
+                gsm.add(GameStateManager.GAMEOVER);
+                gsm.pop(GameStateManager.PLAY);
+            }
+            player.update(time);
+            gc.update(time);
+            pui.update(time);
+        }
+
+        cam.update();
+    }
+    public void input(MouseHandler mouse, KeyHandler key) {
+        key.escape.tick();
+
+        if(!gsm.isStateActive(GameStateManager.PAUSE)) {
+            player.input(mouse, key);
+            gc.input(mouse,key);
+        }
+
+        cam.input(mouse,key);
+        pui.input(mouse, key);
+        if(key.escape.clicked){
+            if(gsm.isStateActive(GameStateManager.PAUSE)){
+                gsm.pop(GameStateManager.PAUSE);
+            }else{
+                gsm.add(GameStateManager.PAUSE);
+            }
+        }
+    }
+    public void render(Graphics2D g) {
+        gc.render(g);
+        player.render(g);
+        String fps = GamePanel.oldFrameCount + " FPS";
+        SpriteSheet.drawArray(g,fps, new Vector2f(GamePanel.width- fps.length()*32,32) , 32,24);
+        String tps = GamePanel.oldTickCount + " TPS";
+        SpriteSheet.drawArray(g,tps, new Vector2f(GamePanel.width- fps.length()*32,64) , 32,24);
+        String coinInterface = "Coin:"+player.getCoin();
+        SpriteSheet.drawArray(g,coinInterface, new Vector2f(GamePanel.width- coinInterface.length()*32,96) , 32,24);
+
+        cam.render(g);
+        pui.render(g);
+
+    }
+}
Index: src/game/states/PauseState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/PauseState.java b/src/game/states/PauseState.java
new file mode 100644
--- /dev/null	(date 1653212407726)
+++ b/src/game/states/PauseState.java	(date 1653212407726)
@@ -0,0 +1,27 @@
+package game.states;
+
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import java.awt.Graphics2D;
+
+public class PauseState extends GameState  {
+    public PauseState(GameStateManager gsm) {
+        super(gsm);
+    }
+
+    @Override
+    public void update(double time) {
+
+    }
+
+    @Override
+    public void input(MouseHandler mouse, KeyHandler key) {
+
+    }
+
+    @Override
+    public void render(Graphics2D g) {
+
+    }
+}
Index: src/game/graphics/Animation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/graphics/Animation.java b/src/game/graphics/Animation.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/graphics/Animation.java	(date 1652572440000)
@@ -0,0 +1,65 @@
+package game.graphics;
+
+
+
+public class Animation {
+
+    private Sprite[] frames;
+    private int[] states;
+    private int currentFrame;
+    private int numFrames;
+
+    private int count;
+    private int delay;
+
+    private int timesPlayed;
+
+    public Animation(Sprite[] frames){
+        timesPlayed =0;
+        setFrames(0,frames);
+        states = new int[10];
+
+    }
+    public Animation(){
+        timesPlayed =0;
+        states = new int[10];
+    }
+
+    public void setFrames(int state ,Sprite[] frames){
+        this.frames= frames;
+        currentFrame =0;
+        count =0;
+        timesPlayed =0;
+        delay=2;
+        if(states[state] == 0) {
+            numFrames = frames.length;
+        } else {
+            numFrames = states[state];
+        }
+    }
+    public void setDelay(int i){ delay =i; }
+    public void setFrame(int i){ currentFrame =i; }
+    public void setNumFrames(int i, int state) { states[state] = i; }
+
+    public void update(){
+        if(delay == -1) return;
+        count++;
+        if(count == delay){
+            currentFrame ++;
+            count =0;
+        }
+        if(currentFrame == numFrames){
+            currentFrame =0;
+            timesPlayed++;
+        }
+    }
+
+    public int getDelay(){ return delay; }
+    public int getFrame(){ return currentFrame; }
+    public int getCount(){ return count; }
+
+    public Sprite getImage(){ return frames[currentFrame]; }
+    public boolean hasPlayedOnce(){ return timesPlayed >0; }
+    public boolean hasPlayed (int i){ return timesPlayed == i; }
+
+}
Index: src/game/states/TitleState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/states/TitleState.java b/src/game/states/TitleState.java
new file mode 100644
--- /dev/null	(date 1653279219070)
+++ b/src/game/states/TitleState.java	(date 1653279219070)
@@ -0,0 +1,114 @@
+package game.states;
+
+import game.GamePanel;
+import game.graphics.Fontf;
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+
+public class TitleState extends GameState{
+
+    private int commandNum;
+    private BufferedImage image;
+
+    public TitleState(GameStateManager gsm) {
+        super(gsm);
+        try {
+            image = ImageIO.read(getClass().getResourceAsStream("/res/ui/pngTree.png"));
+        } catch (IOException e) {
+            System.out.printf("ERORR");
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void update(double time) {
+
+    }
+
+    @Override
+    public void input(MouseHandler mouse, KeyHandler key) {
+        key.down.tick();
+        key.up.tick();
+        key.enter.tick();
+        if(key.up.clicked) {
+            commandNum --;
+            if(commandNum <0) {
+                commandNum = 2;
+            }
+        }
+        if(key.down.clicked) {
+            commandNum ++;
+            if(commandNum >2) {
+                commandNum = 0;
+            }
+        }
+        if(key.enter.clicked) {
+            if(commandNum== 0) {
+                gsm.add(GameStateManager.PLAY);
+                gsm.pop(GameStateManager.TITLE);
+            }
+            if(commandNum== 1) {
+                // add later
+            }
+            if(commandNum== 2) {
+                System.exit(0);
+            }
+        }
+    }
+
+    @Override
+    public void render(Graphics2D g) {
+        //draw background
+        g.drawImage(image,0,0, GamePanel.width, GamePanel.height,null);
+        // title name
+        g.setFont(gsm.fontf.getFont("MotionBold").deriveFont(Font.TRUETYPE_FONT, 100F));
+        String text = "POO Game Adventure";
+        int x = getXforCenteredText(text,g);
+        int y = 128;
+        //draw Shadow
+        g.setColor(Color.gray);
+        g.drawString(text, x + 3, y - 3);
+        //draw main color
+        g.setColor(Color.black);
+        g.drawString(text, x, y);
+
+        //draw nextScreen
+        g.setFont(gsm.fontf.getFont("MeatMadness").deriveFont(Font.ITALIC, 40F));
+        g.setColor(Color.BLACK);
+        text = "NEW GAME";
+        x = getXforCenteredText(text,g);
+        y += 64 * 5;
+        g.drawString(text, x, y);
+        if (commandNum == 0) {
+            g.drawString(">", x - 32, y);
+        }
+
+        text = "INSTRUCTION";
+        x = getXforCenteredText(text,g);
+        y += 64;
+        g.drawString(text, x, y);
+        if (commandNum == 1) {
+            g.drawString(">", x - 32, y);
+        }
+
+        text = "QUIT GAME";
+        x = getXforCenteredText(text,g);
+        y += 64;
+        g.drawString(text, x, y);
+        if (commandNum == 2) {
+            g.drawString(">", x - 32, y);
+        }
+    }
+    public int getXforCenteredText(String text, Graphics2D g) {
+        int length= (int)g.getFontMetrics().getStringBounds(text,g).getWidth();
+        return GamePanel.width/2 -length/2;
+    }
+
+}
Index: src/game/graphics/Sprite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/graphics/Sprite.java b/src/game/graphics/Sprite.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/graphics/Sprite.java	(date 1652572440000)
@@ -0,0 +1,26 @@
+package game.graphics;
+
+import java.awt.*;
+import java.awt.image.BufferedImage;
+
+public class Sprite {
+    public BufferedImage image;
+
+    private int w;
+    private int h;
+
+    public Sprite(BufferedImage image) {
+        this.image = image;
+        this.w = image.getWidth();
+        this.h = image.getHeight();
+    }
+
+    public int getWidth() { return w; }
+    public int getHeight() { return h; }
+
+    public Sprite getSubimage(int x, int y, int w, int h) {
+        return new Sprite(image.getSubimage(x, y, w, h));
+    }
+
+
+}
Index: src/game/graphics/Font.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/graphics/Font.java b/src/game/graphics/Font.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/graphics/Font.java	(date 1652572440000)
@@ -0,0 +1,95 @@
+package game.graphics;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+
+public class Font {
+    private BufferedImage FONTSHEET = null;
+    public BufferedImage[][] spriteArray;
+    private final int TILE_SIZE = 32;
+    public int w;
+    public int h;
+    private int wLetter;
+    private int hLetter = 0;
+
+    public Font(String file) {
+        w = TILE_SIZE;
+        h = TILE_SIZE;
+
+        System.out.println("Loading: " + file + ".....");
+        FONTSHEET = loadFont(file);
+
+        wLetter = FONTSHEET.getWidth() / w;
+        hLetter = FONTSHEET.getHeight() / h;
+        loadFontArray();
+    }
+
+    public Font(String file, int w, int h) {
+        this.w = w;
+        this.h = h;
+
+        System.out.println("Loading: " + file + ".....");
+        FONTSHEET = loadFont(file);
+
+        wLetter = FONTSHEET.getWidth() / w;
+        hLetter = FONTSHEET.getHeight() / h;
+        loadFontArray();
+    }
+
+    public void setSize(int width, int height) {
+        setWidth(width);
+        setHeight(height);
+    }
+
+    public void setWidth(int i) {
+        w = i;
+        wLetter = FONTSHEET.getWidth() / w;
+    }
+
+    public void setHeight(int i) {
+        h = i;
+        hLetter = FONTSHEET.getWidth() / h;
+    }
+
+    public int getWidth() {
+        return w;
+    }
+    public int getHeight() {
+        return h;
+    }
+
+    private BufferedImage loadFont(String file) {
+        BufferedImage sprite = null;
+        try {
+            sprite = ImageIO.read(getClass().getClassLoader().getResourceAsStream(file));
+        } catch (Exception e) {
+            System.out.println("ERROR: could not load file: " + file);
+        }
+        return sprite;
+    }
+
+    public void loadFontArray() {
+        spriteArray = new BufferedImage[wLetter][hLetter];
+
+        for (int x = 0; x < wLetter; x++) {
+            for (int y = 0; y < hLetter; y++) {
+                spriteArray[x][y] = getLetter(x, y);
+            }
+        }
+    }
+
+    public BufferedImage getFontSheet() {
+        return FONTSHEET;
+    }
+
+    public BufferedImage getLetter(int x, int y) {
+        return FONTSHEET.getSubimage(x * w, y * h, w, h);
+    }
+
+    public BufferedImage getFont(char letter) {
+        int value = letter ;
+        int x = value % wLetter;
+        int y = value/ wLetter;
+        return getLetter(x,y);
+    }
+
+}
Index: src/game/gameObject/monster/Enemy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/monster/Enemy.java b/src/game/gameObject/monster/Enemy.java
new file mode 100644
--- /dev/null	(date 1653280768713)
+++ b/src/game/gameObject/monster/Enemy.java	(date 1653280768713)
@@ -0,0 +1,200 @@
+package game.gameObject.monster;
+import game.data.GameControl;
+import game.gameObject.Entity;
+import game.gameObject.Player;
+import game.gameObject.object.OBJ_Coin_Bronze;
+import game.gameObject.object.OBJ_Door;
+import game.gameObject.object.OBJ_ManaCrystal;
+import game.gameObject.object.OBJ_Potion_Red;
+import game.graphics.SpriteSheet;
+import game.math.AABB;
+import game.util.Camera;
+import game.math.Vector2f;
+
+import java.awt.Color;
+import java.awt.Graphics2D;
+
+public class Enemy extends Entity {
+
+    protected AABB sense;
+    protected int r_sense;
+    protected AABB attackrange;
+    protected int r_attackrange;
+    protected int r_enemyArea;
+    protected Camera cam;
+    protected int xOffset;
+    protected int yOffset;
+
+    public boolean useRight = false;
+
+    public Enemy(Camera cam, SpriteSheet spriteSheet, Vector2f origin, int size) {
+        super(spriteSheet, origin, size);
+        this.cam = cam;
+
+        damage = 10;
+        acc = 1f;
+        deacc = 2f;
+        maxSpeed = 2f;
+        r_sense = 350;
+        r_attackrange = 32;
+        r_enemyArea= 500;
+
+        bounds.setWidth(42);
+        bounds.setHeight(20);
+        bounds.setXOffset(12);
+        bounds.setYOffset(40);
+
+        sense = new AABB(new Vector2f(origin.x + size / 2 - r_sense / 2, origin.y + size / 2 - r_sense / 2), r_sense);
+        attackrange = new AABB(new Vector2f(origin.x + bounds.getXOffset() + bounds.getWidth() / 2 - r_attackrange / 2,
+                origin.y + bounds.getYOffset() + bounds.getHeight() / 2 - r_attackrange / 2), r_attackrange);
+    }
+
+
+    public void reset(){
+        health = maxHealth;
+        healthpercent = health / maxHealth;
+    }
+
+    public void drop() {
+        GameControl.materialGame.add(new OBJ_Coin_Bronze((new Vector2f(this.getPos().x,this.getPos().y)),32, this.coin));
+        GameControl.materialGame.add(new OBJ_ManaCrystal(new Vector2f(this.getPos().x-50,this.getPos().y),32));
+        GameControl.materialGame.add(new OBJ_Potion_Red(new Vector2f(this.getPos().x-20,this.getPos().y),32));
+        int rand = (int) (Math.random()*75);
+        if(rand<15){
+            GameControl.materialGame.add(new OBJ_Door(new Vector2f(this.getPos().x,this.getPos().y),32));
+            }
+        else if(rand<50 && rand >= 15){
+            GameControl.materialGame.add(new OBJ_ManaCrystal(new Vector2f(this.getPos().x+25,this.getPos().y),32));}
+        else if(rand>=50 && rand <=75) {
+            GameControl.materialGame.add(new OBJ_Potion_Red(new Vector2f(this.getPos().x-50,this.getPos().y),32));
+            GameControl.materialGame.add(new OBJ_ManaCrystal(new Vector2f(this.getPos().x+25,this.getPos().y),32));
+        }
+//        if(75<rand && rand <=100) {new OBJ_Item}
+    }
+    // A move
+    private void autoMove(Vector2f posA, Vector2f posB){
+        if (posA.y > posB.y + 1) {
+            up = true;
+        } else {
+            up = false;
+        }
+        if (posA.y < posB.y - 1) {
+            down = true;
+        } else {
+            down = false;
+        }
+        if (posA.x > posB.x + 1) {
+            left = true;
+        } else {
+            left = false;
+        }
+        if (posA.x < posB.x - 1) {
+            right = true;
+        } else {
+            right = false;
+        }
+    }
+    private void noDirection(){
+        up = false;
+        down = false;
+        left = false;
+        right = false;
+    }
+    private void chase(Player player) {
+        AABB playerBounds = player.getBounds();
+        if (sense.colCircleBox(playerBounds) && !attackrange.colCircleBox(playerBounds)) {
+            autoMove(this.pos, player.getPos());
+        } else {
+            noDirection();
+        }
+    }
+
+    public void moveBack(Vector2f center) {
+        if (this.pos.x!=center.x || this.pos.y!= center.y) {autoMove(this.pos, center);}
+        else { noDirection();}
+    }
+
+    public void moveInCircle(Vector2f center,double r, Player player) {
+        if(this.isInCirclePath(center,r) && sense.colCircleBox(player.getBounds())
+                && !player.isInCircle(center,r)){
+            dx=0;
+            dy=0;
+            noDirection();
+        }
+        else {
+            if (this.isInCircle(center, r)) {
+                if (sense.colCircleBox(player.getBounds())) {
+                    this.chase(player);
+                } else {
+                    reset();
+                    this.moveBack(center);
+                }
+            } else {
+                this.moveBack(center);
+            }
+            move();
+        }
+    }
+
+    public void update(Player player, double time, Vector2f defaultPosition) {
+        if (cam.getBounds().collides(this.bounds)) {
+            super.update(time);
+            moveInCircle(defaultPosition,r_enemyArea,player);
+
+            if(teleported) {
+                teleported = false;
+
+                bounds.setWidth(size / 2);
+                bounds.setHeight(size / 2 - yOffset);
+                bounds.setXOffset(size / 2 - xOffset);
+                bounds.setYOffset(size / 2 + yOffset);
+
+                hitBounds = new AABB(pos, size, size);
+                hitBounds.setXOffset(size / 2);
+
+                sense = new AABB(new Vector2f(pos.x + size / 2 - r_sense / 2, pos.y + size / 2 - r_sense / 2), r_sense);
+                attackrange = new AABB(new Vector2f(pos.x + bounds.getXOffset() + bounds.getWidth() / 2 - r_attackrange / 2 , pos.y + bounds.getYOffset() + bounds.getHeight() / 2 - r_attackrange / 2 ), r_attackrange);
+            }
+
+            if (attackrange.colCircleBox(player.getBounds()) && !isInvincible) {
+                attack = true;
+                player.setHealth(player.getHealth() - damage, 5f * getDirection(), currentDirection == UP || currentDirection == DOWN);
+            } else {
+                attack = false;
+            }
+
+            if (!fallen) {
+                if (!tc.collisionTile(dx, 0)) {
+                    sense.getPos().x += dx;
+                    attackrange.getPos().x += dx;
+                    pos.x += dx;
+                }
+                if (!tc.collisionTile(0, dy)) {
+                    sense.getPos().y += dy;
+                    attackrange.getPos().y += dy;
+                    pos.y += dy;
+                }
+            } else {
+                if (ani.hasPlayedOnce()) {
+                    die = true;
+                }
+            }
+        }
+    }
+
+    @Override
+    public void render(Graphics2D g) {
+        if (cam.getBounds().collides(this.bounds)) {
+
+            g.drawImage(ani.getImage().image, (int) (pos.getWorldVar().x), (int) (pos.getWorldVar().y), size, size, null);
+            // Health Bar UI
+            g.setColor(Color.red);
+            g.fillRect((int) (pos.getWorldVar().x + bounds.getXOffset()) +10, (int) (pos.getWorldVar().y - 5), 24, 5);
+
+            g.setColor(Color.green);
+            g.fillRect((int) (pos.getWorldVar().x + bounds.getXOffset()) +10, (int) (pos.getWorldVar().y - 5), (int) (24 * healthpercent), 5);
+
+        }
+
+    }
+}
\ No newline at end of file
Index: src/game/graphics/SpriteSheet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/graphics/SpriteSheet.java b/src/game/graphics/SpriteSheet.java
new file mode 100644
--- /dev/null	(date 1653236479328)
+++ b/src/game/graphics/SpriteSheet.java	(date 1653236479328)
@@ -0,0 +1,164 @@
+package game.graphics;
+
+import game.math.Vector2f;
+
+import javax.imageio.ImageIO;
+import java.awt.Graphics2D;
+import java.awt.image.BufferedImage;
+import java.util.ArrayList;
+
+public class SpriteSheet {
+
+    private Sprite SPRITESHEET = null;
+    public Sprite[][] spriteArray;
+    private final int TILE_SIZE = 32;
+    public int w;
+    public int h;
+    private int wSprite;
+    private int hSprite;
+    private String file;
+
+    public static Font currentFont;
+
+    public SpriteSheet(String file) {
+        this.file = file;
+        w = TILE_SIZE;
+        h = TILE_SIZE;
+
+        System.out.println("Loading: " + file + ".....");
+        SPRITESHEET = new Sprite(loadSprite(file));
+
+        wSprite = SPRITESHEET.image.getWidth() / w;
+        hSprite = SPRITESHEET.image.getHeight() / h;
+        loadSpriteArray();
+    }
+
+    public SpriteSheet(Sprite sprite, int w, int h) {
+        this.w = w;
+        this.h = h;
+
+        SPRITESHEET = sprite;
+
+        wSprite = SPRITESHEET.image.getWidth() / w;
+        hSprite = SPRITESHEET.image.getHeight() / h;
+        loadSpriteArray();
+    }
+
+    public SpriteSheet(String file, int w, int h) {
+        this.file = file;
+        this.w = w;
+        this.h = h;
+
+        System.out.println("Loading: " + file + ".....");
+        SPRITESHEET = new Sprite(loadSprite(file));
+
+        wSprite = SPRITESHEET.image.getWidth() / w;
+        hSprite = SPRITESHEET.image.getHeight() / h;
+        loadSpriteArray();
+    }
+
+    public void setSize(int width, int height) {
+        setWidth(width);
+        setHeight(height);
+    }
+
+    public void setWidth(int i) {
+        w = i;
+        wSprite = SPRITESHEET.image.getWidth() / w;
+    }
+
+    public void setHeight(int i) {
+        h = i;
+        hSprite = SPRITESHEET.image.getHeight() / h;
+    }
+
+    public int getWidth() { return w; }
+    public int getHeight() { return h; }
+
+    public BufferedImage loadSprite(String file) {
+        BufferedImage sprite = null;
+        try {
+            sprite = ImageIO.read(getClass().getClassLoader().getResourceAsStream(file));
+        } catch (Exception e) {
+            System.out.println("ERROR: could not load file: " + file);
+        }
+        return sprite;
+    }
+
+    public void loadSpriteArray() {
+        spriteArray = new Sprite[hSprite][wSprite];
+
+        for (int y = 0; y < hSprite; y++) {
+            for (int x = 0; x < wSprite; x++) {
+                spriteArray[y][x] = getSprite(x, y);
+            }
+        }
+    }
+
+
+    public Sprite getSpriteSheet() {
+        return SPRITESHEET;
+    }
+
+    public Sprite getSprite(int x, int y) {
+        return SPRITESHEET.getSubimage(x * w, y * h, w, h);
+    }
+    
+    public Sprite getSprite(int x, int y, int w, int h) {
+        return SPRITESHEET.getSubimage(x * w, y * h, w, h);
+    }
+
+    public BufferedImage getSubimage(int x, int y, int w, int h) {
+        return SPRITESHEET.image.getSubimage(x, y, w, h);
+    }
+
+    public Sprite[] getSpriteArray(int i) {
+        return spriteArray[i];
+    }
+
+    public Sprite[][] getSpriteArray2() {
+        return spriteArray;
+    }
+
+    public static void drawArray(Graphics2D g, ArrayList<BufferedImage> img, Vector2f pos, int width, int height, int xOffset, int yOffset) {
+        float x = pos.x;
+        float y = pos.y;
+
+        for (int i = 0; i < img.size(); i++) {
+            if (img.get(i) != null) {
+                g.drawImage(img.get(i), (int) x, (int) y, width, height, null);
+            }
+            x += xOffset;
+            y += yOffset;
+        }
+    }
+    public static void drawArray(Graphics2D g, String word, Vector2f pos, int size) {
+        drawArray(g, currentFont, word, pos, size, size, size, 0);
+    }
+
+    public static void drawArray(Graphics2D g, String word, Vector2f pos, int size, int xOffset) {
+        drawArray(g, currentFont, word, pos, size, size, xOffset, 0);
+    }
+
+    public static void drawArray(Graphics2D g, String word, Vector2f pos, int width, int height, int xOffset) {
+        drawArray(g, currentFont, word, pos, width, height, xOffset, 0);
+    }
+
+    public static void drawArray(Graphics2D g, Font f, String word, Vector2f pos, int size, int xOffset) {
+        drawArray(g, f, word, pos, size, size, xOffset, 0);
+    }
+    public static void drawArray(Graphics2D g, Font f, String word, Vector2f pos, int width, int height, int xOffset, int yOffset) {
+        float x = pos.x;
+        float y = pos.y;
+        currentFont = f;
+        for (int i = 0; i < word.length(); i++) {
+            if (word.charAt(i) != 32) {
+                g.drawImage(f.getFont(word.charAt(i)), (int) x, (int) y, width, height, null);
+            }
+            x += xOffset;
+            y += yOffset;
+        }
+    }
+
+
+}
Index: src/game/gameObject/NPC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/NPC.java b/src/game/gameObject/NPC.java
new file mode 100644
--- /dev/null	(date 1653149413417)
+++ b/src/game/gameObject/NPC.java	(date 1653149413417)
@@ -0,0 +1,31 @@
+package game.gameObject;
+
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+
+import game.util.Camera;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+
+import java.awt.*;
+
+public class NPC extends Entity {
+
+    public NPC(Camera cam, SpriteSheet spriteSheet, Vector2f orgin, int size){
+        super(spriteSheet, orgin, size);
+
+    }
+
+    public void render(Graphics2D g) {
+        g.drawImage(ani.getImage().image, (int) (pos.getWorldVar().x), (int) (pos.getWorldVar().y), size, size, null);
+    }
+
+    public void update(double time){
+
+    }
+
+    public void input(MouseHandler mouse, KeyHandler key) {
+
+    }
+}
Index: src/game/gameObject/GameObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/GameObject.java b/src/game/gameObject/GameObject.java
new file mode 100644
--- /dev/null	(date 1652882795600)
+++ b/src/game/gameObject/GameObject.java	(date 1652882795600)
@@ -0,0 +1,83 @@
+package game.gameObject;
+
+import game.graphics.SpriteSheet;
+import game.math.AABB;
+import game.util.TileCollision;
+import game.math.Vector2f;
+
+import java.awt.Graphics2D;
+
+
+public abstract class GameObject {
+
+    protected SpriteSheet spriteSheet;
+    protected AABB bounds;
+    protected Vector2f pos;
+    protected int size;
+
+    // used for moving objects like boxes and such
+    protected float dx;
+    protected float dy;
+
+    protected float maxSpeed = 4f;
+    protected float acc = 2f;
+    protected float deacc = 0.3f;
+    protected float force = 25f;
+
+    protected int coin =0;
+
+    protected boolean teleported = false;
+	protected TileCollision tc;
+	protected String name = "";
+
+    public GameObject(SpriteSheet spriteSheet, Vector2f origin, int size) {
+        this(origin,size);
+        this.spriteSheet = spriteSheet;
+    }
+    public GameObject(Vector2f origin,int size) {
+        this.bounds = new AABB(origin, size, size);
+        this.pos = origin;
+        this.size = size;
+    }
+
+    public void setPos(Vector2f pos) {
+        this.pos = pos;
+        this.bounds = new AABB(pos, size, size);
+        teleported = true;
+    }
+
+	public void setName(String name) { this.name = name; }
+
+    public void setSize(int i) { size = i; }
+    public void setMaxSpeed(float f) { maxSpeed = f; }
+    public void setAcc(float f) { acc = f; }
+    public void setDeacc(float f) { deacc = f; }
+    public int getCoin() {return coin;}
+    public void setCoin(int coin) {this.coin = coin;}
+
+    public float getDeacc() { return deacc; }
+    public float getAcc() { return acc; }
+    public float getMaxSpeed() { return maxSpeed; }
+    public float getDx() { return dx; }
+    public float getDy() { return dy; }
+    public AABB getBounds() { return bounds; }
+    public Vector2f getPos() { return pos; }
+    public int getSize() { return size; }
+
+    public void addForce(float a, boolean vertical) {
+        if(!vertical) {
+            dx -= a; 
+        } else {
+            dy -= a;
+        }
+    }
+
+    public void update() {
+
+    }
+
+    public void render(Graphics2D g) {
+
+    }
+
+}
\ No newline at end of file
Index: src/game/gameObject/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/Entity.java b/src/game/gameObject/Entity.java
new file mode 100644
--- /dev/null	(date 1653280211458)
+++ b/src/game/gameObject/Entity.java	(date 1653280211458)
@@ -0,0 +1,311 @@
+package game.gameObject;
+
+import game.graphics.Animation;
+import game.graphics.Sprite;
+import game.graphics.SpriteSheet;
+import game.math.AABB;
+import game.util.TileCollision;
+import game.math.Vector2f;
+
+import java.awt.Graphics2D;
+
+
+public abstract class Entity extends GameObject{
+
+    protected int UP =3;
+    protected int DOWN=2;
+    protected int RIGHT=0;
+    protected int LEFT=1;
+    protected int FALLEN=4;
+    protected int ATTACK = 5;
+    protected int IDLE = 6;
+
+
+    protected int currentAnimation;
+    protected int currentDirection = RIGHT;
+
+
+    protected Animation ani;
+    protected int hitsize;
+
+    protected boolean up = false;
+    protected boolean down = false;
+    protected boolean right = false;
+    protected boolean left = false;
+    protected boolean attack = false;
+    protected boolean fallen = false;
+
+    protected boolean hasIdle = false;
+    public boolean xCol = false;
+    public boolean yCol= false;
+    protected int invincible = 800;
+    protected double invincibletime;
+    protected boolean isInvincible = false;
+    protected boolean die = false;
+
+    protected int attackSpeed = 1050; // in milliseconds
+    protected int attackDuration = 650; // in milliseconds
+    protected double attacktime;
+    protected boolean canAttack = true;
+    protected boolean attacking = false;
+
+    protected int maxHealth = 100;
+    protected int health = 100;
+    protected float healthpercent = 1;
+    protected int defense = 10;
+    protected int damage = 25;
+
+    protected int EXP;
+
+    protected AABB hitBounds;
+
+
+    public Entity (SpriteSheet spriteSheet, Vector2f origin, int size){
+        super(spriteSheet, origin, size);
+        this.hitsize = size;
+
+        hitBounds = new AABB(origin,size,size);
+        hitBounds.setXOffset(size/2);
+
+        ani = new Animation();
+        setAnimation(RIGHT, spriteSheet.getSpriteArray(RIGHT),10 );
+
+        tc = new TileCollision(this);
+    }
+
+    public void setFallen(boolean b){ fallen = b; }
+
+    public void setHealth(int i, float f, boolean dir) {
+        if(!isInvincible) {
+            health = i;
+            isInvincible = true;
+            invincibletime = System.nanoTime();
+            if(health <= 0) {
+                die = true;
+            }
+
+            addForce(f, dir);
+
+            healthpercent = (float) health / (float) maxHealth;
+        }
+    }
+    public boolean getDeath() { return die; }
+    public int getHealth() { return health; }
+    public float getHealthPercent() { return healthpercent; }
+    public int getDefense() { return defense; }
+    public AABB getHitBounds() { return hitBounds; }
+    public int getEXP(){ return EXP;}
+    public void setEXP(int EXP){ this.EXP= EXP;}
+
+    public int getDirection() {
+        if(currentDirection == UP || currentDirection == LEFT) {
+            return 1;
+        }
+        return -1;
+    }
+    public Animation getAnimation() { return ani; }
+
+    public void setAnimation(int i, Sprite[] frames, int delay){
+        currentAnimation = i;
+        ani.setFrames(i,frames);
+        ani.setDelay(delay);
+    }
+
+    public void animate() {
+
+        if(attacking) {
+            if(currentAnimation < 5) {
+                setAnimation(currentAnimation + ATTACK, spriteSheet.getSpriteArray(currentAnimation + ATTACK), attackDuration / 100);
+            }
+        } else if (up) {
+            if ((currentAnimation != UP || ani.getDelay() == -1)) {
+                setAnimation(UP, spriteSheet.getSpriteArray(UP), 5);
+            }
+        } else if (down) {
+            if ((currentAnimation != DOWN || ani.getDelay() == -1)) {
+                setAnimation(DOWN, spriteSheet.getSpriteArray(DOWN), 5);
+            }
+        } else if (left) {
+            if ((currentAnimation != LEFT || ani.getDelay() == -1)) {
+                setAnimation(LEFT, spriteSheet.getSpriteArray(LEFT), 5);
+            }
+        } else if (right) {
+            if ((currentAnimation != RIGHT || ani.getDelay() == -1)) {
+                setAnimation(RIGHT, spriteSheet.getSpriteArray(RIGHT), 5);
+            }
+        } else if (fallen) {
+            if (currentAnimation != FALLEN || ani.getDelay() == -1) {
+                setAnimation(FALLEN, spriteSheet.getSpriteArray(FALLEN), 15);
+            }
+        }
+        else {
+            if(!attacking && currentAnimation > 4) {
+                setAnimation(currentAnimation - ATTACK, spriteSheet.getSpriteArray(currentAnimation - ATTACK), -1);
+            } else if(!attacking) {
+                if(hasIdle && currentAnimation != IDLE) {
+                    setAnimation(IDLE, spriteSheet.getSpriteArray(IDLE), 10);
+                } else if(!hasIdle) {
+                    setAnimation(currentAnimation, spriteSheet.getSpriteArray(currentAnimation), -1);
+                }
+            }
+        }
+    }
+    public void animate1() {
+
+        if(attacking) {
+            if(currentAnimation < 5) {
+                setAnimation(currentAnimation + ATTACK, spriteSheet.getSpriteArray(currentAnimation + ATTACK), attackDuration / 100);
+            }
+        } else if (up) {
+            if ((currentAnimation != UP || ani.getDelay() == -1)) {
+                setAnimation(UP, spriteSheet.getSpriteArray(UP), 5);
+            }
+        } else if (down) {
+            if ((currentAnimation != DOWN || ani.getDelay() == -1)) {
+                setAnimation(DOWN, spriteSheet.getSpriteArray(DOWN), 5);
+            }
+        } else if (left) {
+            if ((currentAnimation != LEFT || ani.getDelay() == -1)) {
+                setAnimation(LEFT, spriteSheet.getSpriteArray(LEFT), 5);
+            }
+        } else if (right) {
+            if ((currentAnimation != RIGHT || ani.getDelay() == -1)) {
+                setAnimation(RIGHT, spriteSheet.getSpriteArray(RIGHT), 5);
+            }
+        } else if (fallen) {
+            if (currentAnimation != FALLEN || ani.getDelay() == -1) {
+                setAnimation(FALLEN, spriteSheet.getSpriteArray(FALLEN), 15);
+            }
+        }
+        else {
+            if(!attacking && currentAnimation > 4) {
+                setAnimation(currentAnimation - ATTACK, spriteSheet.getSpriteArray(currentAnimation - ATTACK), -1);
+            } else if(!attacking) {
+                    setAnimation(currentAnimation, spriteSheet.getSpriteArray(currentAnimation), -1);
+                }
+            }
+    }
+
+    private void setHitBoxDirection() {
+        if (up && !attacking) {
+            hitBounds.setXOffset((size - hitBounds.getWidth()) / 2);
+            hitBounds.setYOffset(-hitBounds.getHeight() / 2 + hitBounds.getXOffset());
+        } else if (down && !attacking) {
+            hitBounds.setXOffset((size - hitBounds.getWidth()) / 2);
+            hitBounds.setYOffset(hitBounds.getHeight() / 2 + hitBounds.getXOffset());
+        } else if (left && !attacking) {
+            hitBounds.setYOffset((size - hitBounds.getHeight()) / 2);
+            hitBounds.setXOffset(-hitBounds.getWidth() / 2 + hitBounds.getYOffset());
+        } else if (right && !attacking) {
+            hitBounds.setYOffset((size - hitBounds.getHeight()) / 2);
+            hitBounds.setXOffset(hitBounds.getWidth() / 2 + hitBounds.getYOffset());
+        }
+    }
+
+    protected boolean isAttacking(double time) {
+
+        if((attacktime / 1000000) > ((time / 1000000) - attackSpeed)) {
+            canAttack = false;
+        } else {
+            canAttack = true;
+        }
+
+        if((attacktime / 1000000) + attackDuration > (time / 1000000)) {
+            return true;
+        }
+
+        return false;
+    }
+
+    public boolean isInCircle(Vector2f center, double r) {
+        if (this.bounds.distance(center)< r) {return true;}
+        return false;
+    }
+    protected boolean isInCirclePath (Vector2f center, double r) {
+        if (this.bounds.distance(center) > (r-size) && this.bounds.distance(center) < (r+ size)) {
+            return true;
+        }
+        return false;
+    }
+
+    public void move() {
+        if(up) {
+            currentDirection = UP;
+            dy -= acc;
+            if(dy < -maxSpeed) {
+                dy = -maxSpeed;
+            }
+        } else {
+            if(dy < 0) {
+                dy += deacc;
+                if(dy > 0) {
+                    dy = 0;
+                }
+            }
+        }
+
+        if(down) {
+            currentDirection = DOWN;
+            dy += acc;
+            if(dy > maxSpeed) {
+                dy = maxSpeed;
+            }
+        } else {
+            if(dy > 0) {
+                dy -= deacc;
+                if(dy < 0) {
+                    dy = 0;
+                }
+            }
+        }
+
+        if(left) {
+            currentDirection = LEFT;
+            dx -= acc;
+            if(dx < -maxSpeed) {
+                dx = -maxSpeed;
+            }
+        } else {
+            if(dx < 0) {
+                dx += deacc;
+                if(dx > 0) {
+                    dx = 0;
+                }
+            }
+        }
+
+        if(right) {
+            currentDirection = RIGHT;
+            dx += acc;
+            if(dx > maxSpeed) {
+                dx = maxSpeed;
+            }
+        } else {
+            if(dx > 0) {
+                dx -= deacc;
+                if(dx < 0) {
+                    dx = 0;
+                }
+            }
+        }
+    }
+
+    public void update(double time) {
+        if(isInvincible) {
+            if((invincibletime / 1000000) + invincible < (time / 1000000) ) {
+                isInvincible = false;
+            }
+        }
+        animate();
+        setHitBoxDirection();
+        ani.update();
+    }
+
+    @Override
+    public abstract void render(Graphics2D g);
+}
+
+
+
+
+
Index: src/game/ui/NpcUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/ui/NpcUI.java b/src/game/ui/NpcUI.java
new file mode 100644
--- /dev/null	(date 1653149513433)
+++ b/src/game/ui/NpcUI.java	(date 1653149513433)
@@ -0,0 +1,67 @@
+package game.ui;
+
+import game.GamePanel;
+
+import game.gameObject.NPC;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+
+import java.awt.Graphics2D;
+
+import java.awt.*;
+
+public class NpcUI {
+
+    private NPC npc;
+    private Graphics2D g2;
+    private GamePanel gp;
+    private KeyHandler key;
+
+    public NpcUI(NPC npc) {
+        this.npc = npc;
+
+    }
+
+    public void drawDialogues(){
+
+        int x = 10*48;
+        int y= 10*48;
+        int width = 48*3;
+        int height = 48*4;
+        int count=0;
+        drawSubWindow(x,y,width,height);
+
+        x+= 48;
+        y+=48;
+        g2.drawString("Buy", x, y );
+        if(count==0){
+            g2.drawString(">",x-24,y);
+        }
+        y+=48;
+        g2.drawString("Slave", x, y );
+        if(count==1){
+            g2.drawString(">",x-24,y);
+        }
+        y+=48;
+        g2.drawString("Leave", x, y );
+        if(count==2){
+            g2.drawString(">",x-24,y);
+        }
+    }
+
+    public void drawSubWindow(int x, int y, int width, int height){
+        Color c = new Color(0,0,0);
+        g2.setColor(c);
+        g2.fillRoundRect(x,y,width,height,35 ,35);
+    }
+
+    public void input(MouseHandler mouse, KeyHandler key) {
+    }
+
+    public void render(Graphics2D g) {
+
+    }
+
+    public void update(double time) {
+    }
+}
Index: src/game/gameObject/Material.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/Material.java b/src/game/gameObject/Material.java
new file mode 100644
--- /dev/null	(date 1652721155258)
+++ b/src/game/gameObject/Material.java	(date 1652721155258)
@@ -0,0 +1,37 @@
+package game.gameObject;
+
+
+import game.math.Vector2f;
+
+import java.awt.*;
+import java.awt.image.BufferedImage;
+
+public abstract class Material extends GameObject{
+    protected int HP;
+    protected int MP;
+    protected int speed;
+    protected int attackValue;
+    protected int defense;
+
+    protected BufferedImage image;
+
+    public int type; //0 is player, 1 is npc, 2 is monster
+    public static final int type_player=0;
+    public static final int type_npc=1;
+    public static final int type_monster=2;
+    public static final int type_sword=3;
+    public static final int type_axe=4;
+    public static final int type_shield =5;
+    public static final int type_consumable=6;
+    public static final int type_pickupOnly=7;
+    public static final int type_nextMap=8;
+
+
+    public Material(Vector2f origin, int size) {
+        super(origin,size);
+    }
+    public void use (Player player){}
+    public void update(){};
+    public abstract void render(Graphics2D g);
+
+}
Index: src/game/gameObject/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/Player.java b/src/game/gameObject/Player.java
new file mode 100644
--- /dev/null	(date 1653194341829)
+++ b/src/game/gameObject/Player.java	(date 1653194341829)
@@ -0,0 +1,201 @@
+package game.gameObject;
+
+import game.GamePanel;
+import game.gameObject.monster.Enemy;
+import game.graphics.SpriteSheet;
+import game.states.PlayState;
+import game.util.Camera;
+import game.util.KeyHandler;
+import game.util.MouseHandler;
+import game.math.Vector2f;
+
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.util.ArrayList;
+
+public class Player extends Entity {
+    private Camera cam;
+    private ArrayList<Enemy> enemy;
+    private ArrayList<Material> inventory;
+
+    private int maxMana=50;
+    private int mana = 5;
+    private float manapercent = 1;
+
+    private int nextLevelEXP = 50;
+
+    public Player(Camera cam, SpriteSheet spriteSheet, Vector2f orgin, int size) {
+        super(spriteSheet, orgin, size);
+        this.cam = cam;
+        setDefaultValue();
+        enemy = new ArrayList<>();
+        inventory = new ArrayList<>();
+    }
+    private void setDefaultValue(){
+        acc = 2f;
+        maxSpeed= 4f;
+        deacc = 0.3f;
+        bounds.setWidth(40);
+        bounds.setHeight(30);
+        bounds.setXOffset(10);
+        bounds.setYOffset(30);
+
+        hitBounds.setWidth(37);
+        hitBounds.setHeight(37);
+
+        ani.setNumFrames(4, UP);
+        ani.setNumFrames(4, DOWN);
+        ani.setNumFrames(4, ATTACK + RIGHT);
+        ani.setNumFrames(4, ATTACK + LEFT);
+        ani.setNumFrames(4, ATTACK + UP);
+        ani.setNumFrames(4, ATTACK + DOWN);
+
+        health = 200;
+        maxHealth = 200;
+        name = "player";
+    }
+
+    public int getMaxMana() {return maxMana;}
+    public void setMaxMana(int maxMana) {this.maxMana = maxMana;}
+    public int getMana() {return mana;}
+    public void setCurrentMana(int mana) {this.mana = mana;}
+    public float getManapercent() {return manapercent;}
+    public void setManapercent(float manapercent) {this.manapercent = manapercent;}
+    public int getMaxHealth() {return maxHealth;}
+    public void setCurrentHealth(int health){this.health = health;}
+
+    public void setTargetEnemy(Enemy enemy) {
+        this.enemy.add(enemy);
+    }
+
+    public void setTargetMaterial(Material material) {
+        this.inventory.add(material);
+    }
+    public void removeMaterial(Material material){
+        this.inventory.remove(material);
+    }
+
+    private void resetPosition(){
+        System.out.println("Reseting Player... ");
+        pos.x = GamePanel.width/2-32;
+        PlayState.map.x=0;
+        cam.getPos().x =0;
+
+        pos.y = GamePanel.height/2-32;
+        cam.getPos().y =0;
+        PlayState.map.y=0;
+
+        setAnimation(RIGHT, spriteSheet.getSpriteArray(RIGHT), 10);
+    }
+    private void checkLevelUp(){
+        if(this.EXP >= nextLevelEXP){
+            maxHealth *=2;
+            health = maxHealth;
+            maxMana = maxMana*2;
+            mana= maxMana;
+            nextLevelEXP *=2;
+        }
+    }
+    private void updateHealthManaPercent(){
+        manapercent = (float) mana/maxMana;
+        healthpercent= (float) health/maxHealth;
+    }
+    public void update(double time){
+        super.update(time);
+
+        attacking = isAttacking(time);
+        for(int i=0; i< enemy.size(); i++ ){
+            if(attacking && hitBounds.collides(enemy.get(i).getBounds()) ){
+                if(!enemy.get(i).isInvincible) {
+//                  USE MANA ???
+                    mana = mana -1;
+                    // use in skill, we will update later
+                }
+                enemy.get(i).setHealth(enemy.get(i).getHealth()- damage, force*getDirection(), currentDirection == UP || currentDirection == DOWN);
+                enemy.remove(i);
+            }
+        }
+        if (!fallen) {
+            move();
+            if (!tc.collisionTile(dx, 0)) {
+                pos.x += dx;
+                xCol = false;
+            } else {
+                xCol = true;
+            }
+
+            if (!tc.collisionTile(0, dy)) {
+                pos.y += dy;
+                yCol = false;
+                } else {
+                    yCol = true;
+                }
+            } else {
+                xCol = false;
+                yCol = false;
+                if (ani.hasPlayedOnce()) {
+                    resetPosition();
+                    dx = 0;
+                    dy = 0;
+                    fallen = false;
+                }
+            }
+        checkLevelUp();
+        updateHealthManaPercent();
+    }
+    @Override
+    public void render(Graphics2D g) {
+        g.setColor(Color.green);
+        g.drawRect((int) (pos.getWorldVar().x + bounds.getXOffset()),(int)(pos.getWorldVar().y+ bounds.getYOffset()),
+                (int) bounds.getWidth(), (int) bounds.getHeight());
+        if(attack){
+            g.setColor(Color.red);
+            g.drawRect((int) (hitBounds.getPos().getWorldVar().x + hitBounds.getXOffset()),(int)(hitBounds.getPos().getWorldVar().y+ hitBounds.getYOffset()),
+                    (int) hitBounds.getWidth(), (int) hitBounds.getHeight());
+        }
+
+        g.drawImage(ani.getImage().image,(int) (pos.getWorldVar().x),(int)(pos.getWorldVar().y), size, size,null);
+    }
+
+    public void input(MouseHandler mouse,KeyHandler key ){
+        if(!fallen){
+            up =key.up.down;
+            down =key.down.down;
+            left=key.left.down;
+            right=key.right.down;
+            if(key.attack.down && canAttack){
+                attack = true;
+                attacktime = System.nanoTime();
+            }
+            else{
+                if(!attacking){
+                    attack = false;
+                }
+            }
+            if(key.shift.down) {
+                maxSpeed = 8;
+                cam.setMaxSpeed(7);
+            } else {
+                maxSpeed = 4;
+                cam.setMaxSpeed(4);
+            }
+
+            if(up && down) {
+                up = false;
+                down = false;
+            }
+
+            if(right && left) {
+                right = false;
+                left = false;
+            }
+        }else {
+            up = false;
+            down = false;
+            right = false;
+            left = false;
+        }
+
+    }
+
+}
Index: src/game/tile/blocks/HoleBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/blocks/HoleBlock.java b/src/game/tile/blocks/HoleBlock.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/blocks/HoleBlock.java	(date 1652572440000)
@@ -0,0 +1,38 @@
+package game.tile.blocks;
+
+import game.graphics.Sprite;
+import game.math.AABB;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public class HoleBlock extends Block {
+
+    public HoleBlock(Sprite sprite, Vector2f pos, int w, int h) {
+        super(sprite, pos, w, h);
+    }
+
+    public boolean update(AABB p) {
+        return false;
+    }
+
+    public Sprite getImage() {
+        return sprite;
+    }
+
+    public boolean isInside(AABB p) {
+
+        if(p.getPos().x + p.getXOffset() < pos.x) return false;
+        if(p.getPos().y + p.getYOffset() < pos.y) return false;
+        if(w + pos.x < p.getWidth() + (p.getPos().x + p.getXOffset())) return false;
+        if(h + pos.y < p.getHeight() + (p.getPos().y + p.getYOffset())) return false;
+        
+        return true;
+    }
+
+    public void render(Graphics2D g){
+        super.render(g);
+        
+    }
+
+}
Index: src/game/tile/blocks/Block.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/blocks/Block.java b/src/game/tile/blocks/Block.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/blocks/Block.java	(date 1652572440000)
@@ -0,0 +1,37 @@
+package game.tile.blocks;
+
+
+import game.graphics.Sprite;
+import game.math.AABB;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public abstract class Block {
+    protected int w;
+    protected int h;
+
+    public Sprite sprite;
+    public Vector2f pos;
+
+    public Block(Sprite sprite, Vector2f pos, int w, int h) {
+        this.sprite = sprite;
+        this.pos = pos;
+        this.w = w;
+        this.h = h;
+    }
+
+    public int getWidth() { return w; }
+    public int getHeight() { return h; }
+
+    public abstract boolean update(AABB p);
+    public abstract boolean isInside(AABB p);
+
+    public abstract Sprite getImage();
+    public Vector2f getPos() { return pos; }
+
+    public void render(Graphics2D g) {
+        g.drawImage(sprite.image, (int) pos.getWorldVar().x, (int) pos.getWorldVar().y, w, h, null);
+
+    }
+}
Index: src/game/tile/blocks/ObjBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/blocks/ObjBlock.java b/src/game/tile/blocks/ObjBlock.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/blocks/ObjBlock.java	(date 1652572440000)
@@ -0,0 +1,31 @@
+package game.tile.blocks;
+
+import game.graphics.Sprite;
+import game.math.AABB;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public class ObjBlock extends Block {
+    
+    public ObjBlock(Sprite sprite, Vector2f pos, int w, int h) {
+        super(sprite, pos, w, h);
+    }
+
+    public boolean update(AABB p) {
+        return true;
+    }
+
+    public Sprite getImage() {
+        return sprite;
+    }
+    
+    public boolean isInside(AABB p) {
+        return false;
+    }
+
+    public void render(Graphics2D g){
+        super.render(g);
+    }
+
+}
Index: src/game/tile/blocks/NormBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/tile/blocks/NormBlock.java b/src/game/tile/blocks/NormBlock.java
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/src/game/tile/blocks/NormBlock.java	(date 1652572440000)
@@ -0,0 +1,31 @@
+package game.tile.blocks;
+
+
+
+import game.graphics.Sprite;
+import game.math.AABB;
+import game.math.Vector2f;
+
+import java.awt.*;
+
+public class NormBlock extends Block {
+
+    public NormBlock(Sprite sprite, Vector2f pos, int w, int h) {
+        super(sprite, pos, w, h);
+    }
+
+    public boolean update(AABB p) {
+        return false;
+    }
+
+    public Sprite getImage() { return sprite; }
+
+    public boolean isInside(AABB p) {
+        return false;
+    }
+
+    public void render(Graphics2D g){
+        super.render(g);
+    }
+
+}
Index: out/production/2D game/res/tile/dungeon_tiles_formatted_v2.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/2D game/res/tile/dungeon_tiles_formatted_v2.tsx b/out/production/2D game/res/tile/dungeon_tiles_formatted_v2.tsx
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/out/production/2D game/res/tile/dungeon_tiles_formatted_v2.tsx	(date 1652572440000)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<tileset version="1.8" tiledversion="1.8.4" name="dungeon_tiles_formatted_v2" tilewidth="16" tileheight="16" tilecount="299" columns="23">
+ <image source="dungeon_tiles_formatted_v2.png" width="368" height="208"/>
+</tileset>
Index: src/game/gameObject/monster/TinyMon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/monster/TinyMon.java b/src/game/gameObject/monster/TinyMon.java
new file mode 100644
--- /dev/null	(date 1653149300086)
+++ b/src/game/gameObject/monster/TinyMon.java	(date 1653149300086)
@@ -0,0 +1,40 @@
+package game.gameObject.monster;
+
+import game.graphics.SpriteSheet;
+import game.util.Camera;
+import game.math.Vector2f;
+
+public class TinyMon extends Enemy {
+
+    public TinyMon(Camera cam, SpriteSheet spriteSheet, Vector2f origin, int size) {
+        super(cam, spriteSheet, origin, size);
+        xOffset = size / 4;
+        yOffset = size / 4;
+
+        damage = 10;
+        acc = 1f;
+        deacc = 2f;
+        maxSpeed = 2f;
+        r_sense = 550;
+        r_attackrange = 32;
+        r_enemyArea= 500;
+
+        ATTACK = 0;
+        FALLEN = 0;
+        UP = 3;
+        DOWN = 2;
+        LEFT = 1;
+        RIGHT = 0;
+        EXP=3;
+
+        coin = 5;
+
+
+        ani.setNumFrames(3, 0);
+//        ani.setNumFrames(5, 1);
+
+        currentAnimation = 0;
+
+    }
+
+    }
Index: src/game/gameObject/monster/TinyBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/gameObject/monster/TinyBox.java b/src/game/gameObject/monster/TinyBox.java
new file mode 100644
--- /dev/null	(date 1653149300068)
+++ b/src/game/gameObject/monster/TinyBox.java	(date 1653149300068)
@@ -0,0 +1,62 @@
+package game.gameObject.monster;
+
+import game.graphics.SpriteSheet;
+import game.math.Vector2f;
+import game.util.Camera;
+
+import java.awt.*;
+
+public class TinyBox extends Enemy {
+    public TinyBox(Camera cam, SpriteSheet spriteSheet, Vector2f origin, int size) {
+        super(cam, spriteSheet, origin, size);
+        xOffset = size / 4;
+        yOffset = size / 4;
+
+        damage = 10;
+        acc = 1f;
+        deacc = 2f;
+        maxSpeed = 2f;
+        r_sense = 350;
+        r_attackrange = 32;
+        coin =10;
+
+        ATTACK = 0;
+        IDLE = 0;
+        FALLEN = 1;
+        UP = 1;
+        DOWN = 1;
+        LEFT = 1;
+        RIGHT = 1;
+
+        hasIdle = true;
+        useRight = true;
+
+        ani.setNumFrames(3, 0);
+        ani.setNumFrames(5, 1);
+
+        currentAnimation = IDLE;
+        right = true;
+    }
+    @Override
+    public void render(Graphics2D g) {
+        if(cam.getBounds().collides(this.bounds)) {
+
+            //if(isInvincible)
+            if(useRight && left) {
+                g.drawImage(ani.getImage().image, (int) (pos.getWorldVar().x) + size, (int) (pos.getWorldVar().y), -size, size, null);
+            } else {
+                g.drawImage(ani.getImage().image, (int) (pos.getWorldVar().x), (int) (pos.getWorldVar().y), size, size, null);
+            }
+
+
+            // Health Bar UI
+            g.setColor(Color.red);
+            g.fillRect((int) (pos.getWorldVar().x + bounds.getXOffset()), (int) (pos.getWorldVar().y - 5), 24, 5);
+
+            g.setColor(Color.green);
+            g.fillRect((int) (pos.getWorldVar().x + bounds.getXOffset()), (int) (pos.getWorldVar().y - 5), (int) (24 * healthpercent), 5);
+
+        }
+    }
+
+}
Index: out/production/2D game/res/tile/tilemap.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/2D game/res/tile/tilemap.xml b/out/production/2D game/res/tile/tilemap.xml
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/out/production/2D game/res/tile/tilemap.xml	(date 1652572440000)
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<map version="1.8" tiledversion="1.8.4" orientation="orthogonal" renderorder="right-down" width="50" height="50" tilewidth="16" tileheight="16" infinite="0" nextlayerid="4" nextobjectid="1">
+ <tileset firstgid="1" name="dungeon_tiles_formatted_v2" tilewidth="16" tileheight="16" tilecount="299" columns="23">
+  <image source="dungeon_tiles_formatted_v2.png" width="368" height="208"/>
+ </tileset>
+ <layer id="1" name="Solid" width="50" height="50">
+  <data encoding="csv">
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172
+</data>
+ </layer>
+ <layer id="2" name="Layer 1" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,48,49,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,48,49,50,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,47,48,49,71,72,73,49,50,48,49,48,49,48,49,48,49,50,48,49,50,48,49,48,49,50,48,48,49,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,70,71,72,73,49,71,72,73,71,72,71,72,71,72,71,72,73,71,72,73,71,72,71,72,73,71,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,93,94,95,96,186,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,25,25,25,25,26,25,25,25,25,26,25,25,26,25,26,28,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,48,48,48,25,25,48,48,48,25,25,48,48,49,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,71,71,71,48,48,71,71,71,48,48,71,71,72,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,71,71,71,71,71,72,71,71,71,72,73,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,50,71,72,73,71,72,73,26,27,27,25,26,27,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,26,27,71,72,73,71,72,73,27,27,50,48,49,50,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,26,27,71,72,73,71,72,73,50,50,25,26,27,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,25,26,27,71,72,73,71,72,73,73,73,25,25,26,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,48,71,72,71,72,25,26,27,48,48,49,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,25,71,71,25,26,27,48,49,50,71,71,72,25,26,28,0,0,0,47,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,48,71,25,26,27,50,71,72,73,25,26,27,48,49,28,0,0,0,70,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,72,25,26,27,25,26,27,25,26,27,25,48,49,25,25,26,51,0,0,1,26,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,48,49,50,48,49,50,48,49,50,48,71,72,48,48,49,74,0,0,24,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,93,94,95,94,95,96,94,34,26,25,33,96,95,94,95,96,95,96,97,0,0,47,26,71,72,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,70,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,28,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,162,2,2,2,2,2,2,2,2,2,2,2,2,2,57,26,25,56,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,164,0,0,0,0,0,
+0,0,0,0,24,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,27,28,0,0,0,0,0,
+0,0,0,0,47,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,50,51,0,0,0,0,0,
+0,0,0,0,93,94,34,48,33,95,96,95,96,94,95,96,95,94,95,96,95,96,94,34,48,33,96,94,95,96,95,96,94,95,96,95,94,95,96,95,94,34,49,33,97,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,28,0,0,0,0,0,0,
+0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,70,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,49,28,0,0,0,0,0,0,
+0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,0,1,57,72,56,164,0,0,0,0,0,
+0,0,0,0,0,47,25,26,27,51,0,0,0,0,0,0,0,0,0,0,0,0,47,25,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,27,28,0,0,0,0,0,
+0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,27,28,0,0,0,0,0,
+0,0,0,0,0,47,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,73,74,0,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,50,51,0,0,0,0,0,
+0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+ <layer id="3" name="Layer 2" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,248,249,250,249,250,0,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,271,272,273,272,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,116,117,116,117,118,119,120,0,0,0,0,116,117,118,116,117,118,119,120,0,0,0,0,0,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,117,118,119,120,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,
+0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,118,118,0,0,0,116,117,118,119,120,120,120,120,120,120,120,120,120,120,0,0,0,116,117,118,119,120,120,120,120,120,120,116,117,118,119,120,0,0,0,120,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,
+0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,0,221,221,222,223,224,0,0,0,0,0,
+0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,0,244,244,245,246,247,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+</map>
Index: out/production/2D game/res/tile/tilemap.tmx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/2D game/res/tile/tilemap.tmx b/out/production/2D game/res/tile/tilemap.tmx
new file mode 100644
--- /dev/null	(date 1652572440000)
+++ b/out/production/2D game/res/tile/tilemap.tmx	(date 1652572440000)
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<map version="1.8" tiledversion="1.8.4" orientation="orthogonal" renderorder="right-down" width="50" height="50" tilewidth="16" tileheight="16" infinite="0" nextlayerid="4" nextobjectid="1">
+ <tileset firstgid="1" name="dungeon_tiles_formatted_v2" tilewidth="16" tileheight="16" tilecount="299" columns="23">
+  <image source="dungeon_tiles_formatted_v2.png" width="368" height="208"/>
+ </tileset>
+ <layer id="1" name="Solid" width="50" height="50">
+  <data encoding="csv">
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,0,0,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,234,234,234,234,172,234,234,234,234,234,0,234,234,234,234,234,234,234,234,234,234,234,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,172,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,
+172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172
+</data>
+ </layer>
+ <layer id="2" name="Layer 1" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,48,49,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,24,25,26,48,49,50,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,47,48,49,71,72,73,49,50,48,49,48,49,48,49,48,49,50,48,49,50,48,49,48,49,50,48,48,49,50,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,70,71,72,73,49,71,72,73,71,72,71,72,71,72,71,72,73,71,72,73,71,72,71,72,73,71,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,93,94,95,96,186,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,25,25,25,25,26,25,25,25,25,26,25,25,26,25,26,28,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,48,48,48,25,25,48,48,48,25,25,48,48,49,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,71,71,71,48,48,71,71,71,48,48,71,71,72,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,71,71,71,71,71,72,71,71,71,72,73,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,50,71,72,73,71,72,73,26,27,27,25,26,27,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,25,26,27,71,72,73,71,72,73,27,27,50,48,49,50,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,25,26,27,71,72,73,71,72,73,50,50,25,26,27,25,26,28,0,0,0,24,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,25,26,27,71,72,73,71,72,73,73,73,25,25,26,48,49,51,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,27,48,71,72,71,72,25,26,27,48,48,49,71,72,74,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,25,71,71,25,26,27,48,49,50,71,71,72,25,26,28,0,0,0,47,26,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,48,71,25,26,27,50,71,72,73,25,26,27,48,49,28,0,0,0,70,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,71,72,25,26,27,25,26,27,25,26,27,25,48,49,25,25,26,51,0,0,1,26,25,26,164,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,24,48,49,48,49,50,48,49,50,48,49,50,48,71,72,48,48,49,74,0,0,24,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,93,94,95,94,95,96,94,34,26,25,33,96,95,94,95,96,95,96,97,0,0,47,26,71,72,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,70,49,48,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,28,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,162,2,2,2,2,2,2,2,2,2,2,2,2,2,57,26,25,56,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,164,0,0,0,0,0,
+0,0,0,0,24,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,27,28,0,0,0,0,0,
+0,0,0,0,47,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,50,51,0,0,0,0,0,
+0,0,0,0,93,94,34,48,33,95,96,95,96,94,95,96,95,94,95,96,95,96,94,34,48,33,96,94,95,96,95,96,94,95,96,95,94,95,96,95,94,34,49,33,97,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,72,28,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,24,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,28,0,0,0,0,0,0,
+0,0,0,0,0,0,47,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,49,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,26,51,0,0,0,0,0,0,
+0,0,0,0,0,0,70,49,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,26,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,49,28,0,0,0,0,0,0,
+0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,1,57,49,56,164,0,0,0,0,0,0,0,0,0,0,0,0,0,1,57,72,56,164,0,0,0,0,0,
+0,0,0,0,0,47,25,26,27,51,0,0,0,0,0,0,0,0,0,0,0,0,47,25,72,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,47,25,26,27,28,0,0,0,0,0,
+0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,0,24,48,49,27,28,0,0,0,0,0,
+0,0,0,0,0,47,71,72,73,51,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,73,74,0,0,0,0,0,0,0,0,0,0,0,0,0,47,71,72,50,51,0,0,0,0,0,
+0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,97,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+ <layer id="3" name="Layer 2" width="50" height="50">
+  <data encoding="csv">
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,248,249,250,249,250,0,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,271,272,273,272,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,116,117,116,117,118,119,120,0,0,0,0,116,117,118,116,117,118,119,120,0,0,0,0,0,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,117,118,119,120,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,
+0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,118,118,0,0,0,116,117,118,119,120,120,120,120,120,120,120,120,120,120,0,0,0,116,117,118,119,120,120,120,120,120,120,116,117,118,119,120,0,0,0,120,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,
+0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,286,0,0,0,0,0,0,0,
+0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,221,222,223,224,224,0,0,0,0,0,0,0,0,0,0,0,0,0,221,221,222,223,224,0,0,0,0,0,
+0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,244,245,246,247,247,0,0,0,0,0,0,0,0,0,0,0,0,0,244,244,245,246,247,0,0,0,0,0,
+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+</data>
+ </layer>
+</map>
