@startuml
    class Entity{
        # currentDirection: int
        # hitsize: int
        # hitBounds: BoundingBox
        # bounds: BoundingBox
        # pos: Vector2f
        # size: int
        # invincible: int
        # attackSpeed: int
        # attackDuration: int
        # maxHealth: int
        # health: int
        # healthpercent: float
        # defense: int
        # damage: int
        # EXP: int
        + Entity()
        + setPos(): void
        + addForce(): void
        + setHealth(): void
        + getDirection(): int
        - setHitBoxDirection(): void
        # isAttacking(): boolean
        +  isInCircle(): boolean
        +  isInCirclePath(): boolean
        + move(): void
        + update(): void
    }
    class Player extends Entity{
        - maxMana: int
        - mana: int
        - manapercent: float
        - nextLevelEXP: int
        - skillOn: boolean
        + Player()
        - setDefaultValue(): void
        + setTargetEnemy(): void
        + setTargetMaterial(): void
        + removeMaterial(): void
        - resetPosition(): void
        - checkLevelUp(): void
        - updateHealthManaPercent(): void
        + update(): void
        + input(): void 
    }
    abstract class GameObject{
        # spriteSheet: spriteSheet
        # bounds: BoundingBox
        # pos: Vector2f
        # size: int
        # coin: int
        # teleported: boolean
        # name: String
        # HP: int
        # MP: int
        # speed: int
        # attackValue: int
        # defense: int
        + GameObject()
        + setPos(): void
        + use(): void
        + update():void
    }

    '-----------------enemy----------------
    class Enemy extends Entity{
        # sense: BoundingBox
        # attackrange: BoundingBox
        # r_sense: int
        # r_attackrange: int
        # r_enemyArea: int
        # xOffset: int
        # yOffset: int
        + useRight: boolean
        + Enemy()
        + reset(): void
        + drop(): void
        - autoDirecting(): void
        - stopDirecting(): void
        + chase(): void
        + moveBack(): void
        + moveInCircle(): void
        + update(): void
    }
    class TinyBox extends Enemy{
        + TinyBox()
    }
    class TinyMon extends Enemy{
        + TinyMon()
    }
    class Minataur extends Enemy{
        + Minataur()
    }
    class Wizard_BOSS extends Enemy{
        - cooldown: int
        - startSkillTime: long
        + Wizard_BOSS()
        + addForce(): void
        + update(): void
    }
    '--------------npc------------
    class NPC extends Entity{
        # sense: BoundingBox
        # r_sense: int
        # xOffset: int
        # yOffset: int
        # g2: Graphics2D
        + NPC()
        + setG2(): void
        + update(): void
        + input(): void
    }
    '---------------skill-----------
    class Skill extends Entity{
        + SKILL_PLAYER: int
        + SKILL_BOSS: int
        # direction: int
        # entity: Entity
        # skillRender: SkillRender
        # r_attack: int
        # defaultVector: Vector2f
        # type: int
        + Skill()
        + update(): void
        + getSkillRender(): SkillRender
        + getType(): int
    }
    class SkilPlayer extends Skill{
        + SkilPlayer()
        + update(): void
        + checkCurrentDirection(): void
    }
    class EnemySkill extends Skill{
        - player: Player
        + EnemySkill()
        + update(): void
        + chase(): void
    }
    '-------------graphics-------------
    class Animation{
        - frames: Sprite
        - states: int
        - currentFrame: int
        - numFrames: int
        - count: int
        - delay: int
        - timesPlayed: int
        + Animation()
        + setFrames(): void
        + setNumFrames(): void
        + update(): void
    }

    class Font{
        - FONTSHEET: BufferedImage
        + spriteArray: BufferedImage
        - TILE_SIZE: int
        + w: int
        + h: int
        - wLetter: int
        - hLetter: int
        + Font()
        + setSize(): void
        - loadFont(): BufferedImage
        - loadFontArray(): BufferedImage
        + getLetter(): BufferedImage
        + getFont(): BufferedImage
    }
    class Sprite{
        + image: BufferedImage
        - w: int
        - h: int
        + Sprite()
        + getWidth(): int
        + getHeight(): int
        + getSubimage(): Sprite
    }
    class SpriteSheet{
        - SPRITESHEET: sprite
        + spriteArray: Sprite
        - TILE_SIZE: int
        + w: int
        + h: int
        - wSprite: int
        - hSprite: int
        - file: String
        + currentFont: Font
        + SpriteSheet()
        - loadSprite: BufferedImage
        + loadSpriteArray: void
        + drawArray(): void
    }
    class Fontf{
        - fonts: HashMap
        + Fontf()
        + loadFont(): void
        + getFont(): void
    }
    '-------------math---------------
    class BoundingBox {
        - pos: Vector2f
        - xOffset: float
        - yOffset: float
        - w: float
        - h: float
        - r: float
        - size: int
        - e: Entity
        + BoundingBox()
        + setBox(): void
        + setCircle(): void
        + collides(): boolean
        + colCircleBox(): boolean
    }
    class Vector2f{
        + x: float
        + y: float
        + worldX: float
        + worldY: float
        + Vector2f()
        + setVector()
        + setWorldVar()
    }

    '-----------------render-------------
    class EntityRender{
        # entity: Entity
        + ani: Animation
        # UP: int
        # DOWN: int
        # LEFT: int
        # FALLEN: int
        # IDLE: int
        # ATTACK_RIGHT: int
        # ATTACK_LEFT: int
        # ATTACK_DOWN: int
        # ATTACK_UP: int
        # SKILL_UP: int
        # SKILL_DOWN: int
        # SKILL_LEFT: int
        # SKILL_RIGHT: int
        # currentAnimation: int
        # spriteSheet: SpriteSheet
        + EntityRender()
        + setAnimation(): void
        + animate(): void
        + update(): void
        + render(): void
    }
    class EnemySkillRender{
        - arrow: SpriteSheet
        - skill: EnemySkill
        + EnemySkillRender()
        + render(): void
    }
    class NPCRender extends EntityRender{
        - npc: NPC
        + NPCRender()
        + update(): void
        + render(): void
    }
    class ObjectRender{
        - image: BufferedImage
        - size: int
        - pos: Vector2f
        - spriteSheet: SpriteSheet
        + ObjectRender()
        + render(): void
    }
    class SkillRender{
        - arrow: SpriteSheet
        - skill: Skill
        + SkillRender()
        + render(): void
    }
    class TinyBoxRender extends EntityRender{
        - tiny: TinyBox
        + TinyBoxRender()
        + update()
        + render(): void
    }
    class TinyMonRender extends EntityRender{
        - tiny: TinyMon
        + TinyMonRender()
        + update(): void
        + render(): void
    }
    class txtAndImageRender{
        - txt: String
        - txtTran: double
        + txtAndImageRender()
        + renderTxt(): void
    }
    class WizardRender  extends EntityRender{
        - wiz: Wizard_BOSS
        + WizardRender()
        + render(): void
    }
    '--------------states------------
    class DialoguesState extends GameState{
        + DialoguesState()
        + update(): void
        + input(): void
        + render(): void
    }
    abstract class GameState{
        # gsm: GameStateManager
        + GameState()
        + update(): void
        + intput(): void
        + render(): void
    }
    class GameStateManager{
        - states: GameState
        + map: Vector2f
        + cam: Camera
        + g: Graphics2D
        + font: Font
        + fontf: Fontf
        + GameStateManager()
        + isStateActive(): boolean
        + pop(): void
        + add(): void
        + addAndpop(): void
        + update(): void
        + input(): void
        + render(): void
    }
    class MenuState extends GameState {
        + MenuState()
        + update(): void
        + input: void
        + render(): void
        + Menu(): void
        + Difficulty()
        + EasyMode(): void
        + MediumMode(): void
        + HardMode(): void
    }
    class PauseState extends GameState {
        + PauseState()
        + update(): void
        + input: void
        + render(): void
    }
    class TitleState extends GameState{
        - commandNum: int
        + TitleState()
        + update(): void
        + input: void
        + render(): void
        + getXforCenteredText(): int
    }
    class PlayState extends GameState{
        - player: Player
        - playerRender: PlayerRender
        + map: Vector2f
        - cam: Camera
        - pui: PlayerUI
        - gc: GameControl
        + PlayState()
        + update(): void
        + input(): void
        + render(): void
    }
    class ShopState extends GameState{
        - commandNum: int
        - function: int
        - shop: int
        - slotCol: int
        - slotRow: int
        - items: ArrayList<GameObject> 
        - spriteSheet1: SpriteSheet
        - spriteSheet2: SpriteSheet
        - spriteSheet3: SpriteSheet
        - image: Image
        - player: Player
        + ShopState()
        + drawIntro(): void
        + buy(): void
        + drawAttributes(): void
        + drawSubWindow(): void
        + drawShop(): void
        + update(): void
        + input(): void
        + render(): void
    }
    class GameOverState extends GameState {
        + GameOverState()
        + update(): void
        + input(): void
        + render(): void
    }
    class GameIntruction extends GameState{
        - count: int
        - Sprite: rock
        - Musroom: Sprite
        - smallTree: Sprite
        - soil: Sprite
        - playerState: int
        - currentCount: int
        - isAttacking: boolean
        - attackingState: int
        - Up: boolean
        - Down: boolean
        - Left: boolean
        - ms1: boolean
        - ms2: boolean
        - Right: boolean
        - playerScreenX: int
        - playerScreenY: int
        - a: int
        - b: int
        - direction: int
        - playerSpirite[][]: Sprite
        - txt[]: String
        - Monster[]: Sprite
        - monsterHeath: int
        - attack: Rectangle
        - forMs1: Rectangle
        - forMs2: Rectangle
        - player: Rectangle
        + GameIntruction()
        + update(): void
        + input(): void
        + mapRender(): void
        + playerRender(): void
        + checkColiision(): void
        + buttonRender(): void
        + move(): void
        + renderTxt(): void
        + renderMs1(): void
        + renderMs2(): void
    } 
    class IntroState extends GameState{
        - count: int
        - listOfImages1[]: BufferedImage
        - listTxt[]: txtAndImageRender
        - picTran: double
        - picTran1: double
        - stateOfImage: int
        - stateOfImage1: int
        - littleGirl: SpriteSheet
        - player: SpriteSheet
        - secPerPic: double
        - monsters: SpriteSheet
        - listOfMonsters[][]: Sprite
        - listOfLittleGirl []: Sprite
        - listOfPlayer[]: Sprite
        - process: int
        + IntroState()
        + update(): void
        + input(): void
        + render(): void
        + scaledImage(): void
        + renderImage(): void
        + setUp(): void
    }
    ' -----------data------------
    class GameControl{
        + cam: Camera
        + player: Player
        + gsm: GameStateManager
        - mapAs: MapAsset
        - currentMap: int
        - gameObject: GameObject 
        + enemy: Enemy
        + npc: NPC
        + origin: Vector2f
        + tm: TileManager
        + entityRender: EntityRender
        + GameControl()
        + resetAsset(): void
        + update(): void
        + render(): void
        + setGameObject(): void
    }
    abstract class MapAsset{
        # gc: GameControl
        + MapAsset()
        + setTinyBox(): void
        + setTinyMoon(): void
    }
    class Map01 extends MapAsset {
        + Map01()
        + setMaterialPosition(): void
        + setMonsterPosition(): void
        + resetEnemy(): void
        + setNPC(): void
    }
    class Map02 extends MapAsset {
        + Map02()
        + setMaterialPosition(): void
        + setMonsterPosition(): void
        + resetEnemy(): void
        + setNPC(): void
    }
    class Map03 extends MapAsset {
        + Map03()
        + setMaterialPosition(): void
        + setMonsterPosition(): void
        + resetEnemy(): void
        + setNPC(): void
    }
    class AddItems{
        - size: int
        + AddItems()
    }
    ' ------------util--------------

    class Camera{
        - collisionCam: BoundingBox
        - dx: float
        - dy: float
        - maxSpeed: float
        - acc: float
        - deacc: float
        - widthLimit: int
        - heightLimit: int
        - tileSize: int
        + Camera()
        + setLimit(): void
        + setTileSize(): void
        + update(): void
        + move(): void
        + target(): void
        + input(): void
        + render(): void
    }
    class KeyHandler{
        + Key()
        + toggle(): void
        + tick(): void
        + KeyHandler()
        + releaseAll(): void
    }
    class Sound{
        - setFile(): void
        - play(): void
        - loop(): void
        - stop(): void
        + playLoopMusic(): void
        + stopMusic(): void
        + playSingleMusic(): void
    }
    class TileCollision{
        - e: Entity
        + TileCollision()
        + collisionTile(): boolean
        + collisionHole(): boolean
    }
    '-------------tile--------------

    '------------ui----------------
    class Button{
        - label: String
        - lbWidth: int
        - lbHeight: int
        - image: BufferedImage
        - hoverImage: BufferedImage
        - pressedImage: BufferedImage
        - iPos: Vector2f
        - lbPos: Vector2f
        - bounds: BoundingBox
        - hovering: boolean
        - hoverSize: int
        - events: ArrayList
        - slotevents: ArrayList
        - clicked: boolean
        - pressed: boolean
        - canHover: boolean
        - drawString: boolean
        - pressedtime: float
        - slot: Slots
        + Button()
        + createIconButton(): BufferedImage
        + createButton(): BufferedImage
        + resizeImage(): BufferedImage
        + addHoverImage(): void
        + addPressedImage(): void
        + update(): void
        + hover(): void
        + input(): void
        + render(): void
    }
    class FillBars{
        - bar: BufferedImage
        - e: Entity
        - pos: Vector2f
        - size: int
        - length: int
        - energyLength: int
        - barWidthRatio: int
        - energyWidthRatio: int
        - barHeightRatio: int
        - percent: float
        + FillBars()
        + render(): void
    }
    class InventoryUI{
        + shop: int
        + act: int
        - slotCol: int
        - slotRow: int
        - spriteSheet: SpriteSheet
        - image: Image
        - size: int
        - x: int
        - y: int
        - width: int
        - height: int
        - slotXstart: int
        - slotYstart: int
        - slotX: int
        - slotY: int
        - cursurWight: int
        - cursurHeight: int
        - p: Player
        + inventory: ArrayList
        + InventoryUI()
        + drawSubWindow(): void
        + drawInv(): void
        + drawAttributes(): void
        + drawInfo(): void
        
    }
    GameObject o-- BoundingBox
    Entity o-- BoundingBox
    BoundingBox o-- Vector2f
    GameControl o-- MapAsset
    PlayState o-- GameControl
    PlayState o-- Player
    GameStateManager o-- GameState
    Skill o-- SkillRender
    GameObject o-- ObjectRender
    EntityRender o-- Animation

@enduml