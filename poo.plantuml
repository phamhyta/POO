startuml
    class Entity{
        - posX: float
        - posY: float
        - speed:int
        - defense: int
        {static} - maxHP: int
        - HP: int
    }
    class Enemy extends Entity{
        # sense: AABB
        # r_sense: int
        # attackrange: AABB 
        # r_attackrange: int
        # r_enemyArea: int
        # xOffset: int
        # yOffset: int
        + Enemy()
        + reset(): void
        + drop(): void
        + chase(): void
        + moveBack(): void
        + moveInCircle(): void
        + update(): void
        + render(): void
    }
    class TinyBox extends Enemy{
        + TinyBox()
        + render(): void
    }
    class TinyMon extends Enemy{
        + TinyMon()
    }
    class Player{
        + Player(): constructor
        + update(): void
        + render(): void 
        - input(): void 
        - setDefaultValue(): void 
        + pickUpObject(): void 
        - checkLevelUp(): void 
        + useItem(): void 
        + receiveDamage(): Integer
        + damageMonster(): Integer
        {static} + levelEXP : int
        {static} + maxMana: int
        - mana: int
        - level: int
        - coin: int
        - name: String
        - attack: int
        - currentEXP: int
    }
    class GameObject{
        + name: String
        + image: BufferedImage
        + objAttack: int
        + objDefense: int
        + objSpeed: int
        + objHp:int
        + objMana:int
        + postion_X: float
        + postion_Y: float
        + GameObject(): constructor
        + setup(): BufferedImage 
        + draw():void
        + update():void
    }
    class Material extends GameObject{
        # MP: int
        # HP: int
        # speed: int
        # attackValue: int
        # defense: int
        # image: BufferedImage
        + Material()
        + use(): void
        + update(): void
        + render(): void
    }
    class NPC{
        - name: String
        - guide: String
        - image: BufferedImage
        + NPC(): constructor
        + setup(): BufferedImage 
    }
    class NpcUI {
        - npc: NPC
        - g2: Graphics2D
        - gp: GamePanel
        - key: KeyHandler
        + NpcUI()
        + drawDialogues(): void
        + drawSubWindow(): public

    }
    class Shop{
        - cost: int
        - image: BufferedImage
        + Shop():constructor
        + setup(): BufferedImage
        + updateCoin(): int
    }
    class Map{
        + getTile(): void
        + TileManager(): void
        + CollisionChecker(): void
        + loadMap(): void
        + getTileImage(): void
        + getObjectImage(): void
        + setObject(): void
        + checkObjectCollision(): void
        + Draw(): void
    }
    class Animation{
        - frames: Sprite
        - states: int
        - currentFrame: int
        - numFrames: int
        - count: int
        - delay: int
        - timesPlayed: int
        + Animation()
        + setFrames(): void
        + setNumFrames(): void
        + update(): void
    }
    class Font{
        - FONTSHEET: BufferedImage
        + spriteArray: BufferedImage
        - TILE_SIZE: int
        + w: int
        + h: int
        - wLetter: int
        - hLetter: int
        + Font()
        + setSize(): void
        - loadFont(): BufferedImage
        - loadFontArray(): BufferedImage
        + getLetter(): BufferedImage
        + getFont(): BufferedImage
    }
    class Sprite{
        + image: BufferedImage
        - w: int
        - h: int
        + Sprite()
        + getWidth(): int
        + getHeight(): int
        + getSubimage(): Sprite
    }
    class SpriteSheet{
        - SPRITESHEET: sprite
        + spriteArray: Sprite
        - TILE_SIZE: int
        + w: int
        + h: int
        - wSprite: int
        - hSprite: int
        - file: String
        + currentFont: Font
        + SpriteSheet()
        - loadSprite: BufferedImage
        + loadSpriteArray: void
        + drawArray(): void
    }
    class BoundingBox {
        - pos: Vector2f
        - xOffset: float
        - yOffset: float
        - w: float
        - h: float
        - r: float
        - size: int
        - e: Entity
        + AABB()
        + setBox(): void
        + setCircle(): void
        + collides(): boolean
        + colCircleBox(): boolean
    }
    class Vector2f{
        + x: float
        + y: float
        + worldX: float
        + worldY: float
        + Vector2f()
        + setVector()
        + setWorldVar()
    }
    GameObject <|-- Shop
    Entity <|-- Player
    Entity <|-- NPC
    GameObject o-- BoundingBox
    Entity o-- BoundingBox
    BoundingBox o-- Vector2f

@enduml